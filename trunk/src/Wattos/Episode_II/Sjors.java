
package Wattos.Episode_II;

import Wattos.CloneWars.Gui.StarFilter;
import Wattos.Utils.*;

import java.awt.*;
import java.awt.event.ActionListener;
import java.io.*;
import java.net.*;
import java.util.*;
import javax.swing.*;
import javax.swing.event.*;

public class Sjors extends javax.swing.JFrame {
    private static final long serialVersionUID = -8971243916378011993L;
    static private final String newline = "\n";
    static private File file = null;
    static private File outfile = null;
    static private Classification classi = null;
    static private MRSTARFile mrf = null;
    static private StarFilter ff = null;
    static private final String BMRB_URL = "http://www.bmrb.wisc.edu"; 
    static private ByteArrayOutputStream out = null;
    static private PrintStream pout = null;
    static private String fn = null;
    static private URL url = null;
    static private ActionListener actionListener = null;
    /** STAR Java Organize RestraintS */
    public Sjors() {
        init();
    }

    /** STAR Java Organize RestraintS */
    public Sjors(ActionListener actionListener ) {
        Sjors.actionListener = actionListener;
        init();
    }
    
    public boolean init() {
        General.verbosity = General.verbosityDebug;
        //General.verbosity = General.verbosityNothing;
        out = new ByteArrayOutputStream();
        pout = new PrintStream(out,true);
        General.setOut(pout);
        General.showOutput("Wattos ["+Wattos.CloneWars.UserInterface.WATTOS_VERSION+"]");
                
        ff = new StarFilter();

        classi = new Classification();
        String location = "Data/classification.csv";                    
        boolean status = classi.readFromCsvFile( location );
        if (! status) {
            General.showError("in Classification.main found:");
            General.showError("reading classification file.");
            System.exit(1);
        }        
        initComponents();
        setComboBoxTypesEnabled(false);
        jRadioButton1.setEnabled(false);
        messageBoardCheckStdOut(); 
        return true;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        fc = new javax.swing.JFileChooser();
        jScrollPane6 = new javax.swing.JScrollPane();
        jPanel21 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanelInfo = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();
        jPanelLog = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        log = new javax.swing.JTextArea();
        jPanelCredits = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jEditorPane2 = new javax.swing.JEditorPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jComboBoxProgram = new javax.swing.JComboBox();
        jComboBoxSubtype = new javax.swing.JComboBox();
        jComboBoxFormat = new javax.swing.JComboBox();
        jComboBoxType = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldInputFile = new javax.swing.JTextField();
        jButtonOpen = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jButtonParse = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jTextFieldOutputFile = new javax.swing.JTextField();
        jButtonSave = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        status = new javax.swing.JLabel();

        fc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fcActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Sjors");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                handlerWindowClosing(evt);
            }
            public void windowClosed(java.awt.event.WindowEvent evt) {
                System.out.println("Shutting down...");
                System.exit(0);
              }            
        });

        getAccessibleContext().setAccessibleDescription("STAR Java Omtovenaar RestraintS");
        jScrollPane6.setAutoscrolls(true);
        jPanel21.setAutoscrolls(true);
        jPanel21.setPreferredSize(null);
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Wattos/Episode_II/Data/bmrb_logo_brown_fg_cream_bg.gif")));
        jButton1.setToolTipText("BMRB website");
        jButton1.setMaximumSize(new java.awt.Dimension(106, 106));
        jButton1.setMinimumSize(new java.awt.Dimension(106, 106));
        jButton1.setPreferredSize(new java.awt.Dimension(106, 106));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTabbedPane1.setPreferredSize(new java.awt.Dimension(300, 100));
        jPanelInfo.setName("");
        jScrollPane2.setMinimumSize(null);
        jEditorPane1.setEditable(false);
        jEditorPane1.setMinimumSize(new java.awt.Dimension(0, 22));
        fn = "Data/SjorsInfo.html";
        url = Sjors.class.getResource( fn);
        if (url != null) {
            try {
                jEditorPane1.setPage(url);
            } catch (IOException e) {
                General.showError("Attempted to read a bad URL: " + url);
            }
        } else {
            General.showError("Failed to find resource: " + fn);
        }

        jEditorPane1.addHyperlinkListener(new javax.swing.event.HyperlinkListener() {
            public void hyperlinkUpdate(javax.swing.event.HyperlinkEvent evt) {
                hyperlinkUpdateSjors(evt);
            }
        });

        jScrollPane2.setViewportView(jEditorPane1);

        org.jdesktop.layout.GroupLayout jPanelInfoLayout = new org.jdesktop.layout.GroupLayout(jPanelInfo);
        jPanelInfo.setLayout(jPanelInfoLayout);
        jPanelInfoLayout.setHorizontalGroup(
            jPanelInfoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanelInfoLayout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 321, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanelInfoLayout.setVerticalGroup(
            jPanelInfoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanelInfoLayout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE)
                .addContainerGap())
        );
        jTabbedPane1.addTab("Info", jPanelInfo);

        jPanelLog.setName("");
        log.setColumns(20);
        log.setEditable(false);
        log.setRows(5);
        jScrollPane1.setViewportView(log);

        org.jdesktop.layout.GroupLayout jPanelLogLayout = new org.jdesktop.layout.GroupLayout(jPanelLog);
        jPanelLog.setLayout(jPanelLogLayout);
        jPanelLogLayout.setHorizontalGroup(
            jPanelLogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelLogLayout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 321, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanelLogLayout.setVerticalGroup(
            jPanelLogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelLogLayout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE)
                .addContainerGap())
        );
        jTabbedPane1.addTab("Log", jPanelLog);

        jPanelCredits.setName("");
        jEditorPane2.setEditable(false);
        jEditorPane2.setPreferredSize(null);
        fn = "Data/SjorsCredits.html";
        url = Sjors.class.getResource( fn);
        if (url != null) {
            try {
                jEditorPane2.setPage(url);
            } catch (IOException e) {
                General.showError("Attempted to read a bad URL: " + url);
            }
        } else {
            General.showError("Failed to find resource: " + fn);
        }

        jEditorPane2.addHyperlinkListener(new javax.swing.event.HyperlinkListener() {
            public void hyperlinkUpdate(javax.swing.event.HyperlinkEvent evt) {
                hyperlinkUpdateSjors(evt);
            }
        });

        jScrollPane3.setViewportView(jEditorPane2);

        org.jdesktop.layout.GroupLayout jPanelCreditsLayout = new org.jdesktop.layout.GroupLayout(jPanelCredits);
        jPanelCredits.setLayout(jPanelCreditsLayout);
        jPanelCreditsLayout.setHorizontalGroup(
            jPanelCreditsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelCreditsLayout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 321, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanelCreditsLayout.setVerticalGroup(
            jPanelCreditsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelCreditsLayout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE)
                .addContainerGap())
        );
        jTabbedPane1.addTab("Credits", jPanelCredits);

        org.jdesktop.layout.GroupLayout jPanel5Layout = new org.jdesktop.layout.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .add(jButton1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jTabbedPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jButton1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(jTabbedPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 212, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("-A- Restraint input"));
        jPanel1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jPanel1PropertyChange(evt);
            }
        });

        jLabel4.setText("Program:");

        jLabel5.setText("Type:");

        jComboBoxProgram.setModel(getPossiblePrograms());
        jComboBoxProgram.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxProgramActionPerformed(evt);
            }
        });

        jComboBoxSubtype.setModel(getPossibleSubtypes());
        jComboBoxSubtype.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSubtypeActionPerformed(evt);
            }
        });

        jComboBoxFormat.setModel(getPossibleFormats());
        jComboBoxFormat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxFormatActionPerformed(evt);
            }
        });

        jComboBoxType.setModel(getPossibleTypes());
        jComboBoxType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxTypeActionPerformed(evt);
            }
        });

        jLabel2.setText("Subtype:");

        jLabel3.setText("Subsubtype:");

        jRadioButton1.setText("Lower bounds");
        jRadioButton1.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jRadioButton1.setEnabled(false);
        jRadioButton1.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Input restraints file:");

        jTextFieldInputFile.setEditable(false);

        jButtonOpen.setText("Open");
        jButtonOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOpenActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jLabel3)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jComboBoxFormat, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jRadioButton1)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jLabel1)
                        .add(20, 20, 20)
                        .add(jTextFieldInputFile, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jButtonOpen))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jLabel2)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jComboBoxSubtype, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jLabel5)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jComboBoxType, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jLabel4)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jComboBoxProgram, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        jPanel1Layout.linkSize(new java.awt.Component[] {jLabel2, jLabel3, jLabel4, jLabel5}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        jPanel1Layout.linkSize(new java.awt.Component[] {jComboBoxFormat, jComboBoxProgram, jComboBoxSubtype, jComboBoxType}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(jTextFieldInputFile, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jButtonOpen))
                .add(7, 7, 7)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel4)
                    .add(jComboBoxProgram, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel5)
                    .add(jComboBoxType, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(jComboBoxSubtype, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3)
                    .add(jComboBoxFormat, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jRadioButton1))
        );
        jPanel1.getAccessibleContext().setAccessibleName(null);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("-B- Conversion"));
        jButtonParse.setText("Parse");
        jButtonParse.setEnabled(false);
        jButtonParse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonParseActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jButtonParse, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 95, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(364, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(jButtonParse)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("-C- Restraints output"));
        jLabel6.setText("Output STAR restraints file:");

        jTextFieldOutputFile.setEditable(false);

        jButtonSave.setText("Save As");
        jButtonSave.setEnabled(false);
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel6)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jTextFieldOutputFile, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jButtonSave)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel6)
                    .add(jTextFieldOutputFile, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jButtonSave))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Status"));
        status.setText("Please find a log of output message in the above tab labeled 'Log'");
        status.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        status.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        status.getAccessibleContext().setAccessibleName("No conversion attempted yet.\nPlease fill in info above and select the convert button.");

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .add(status, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 447, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .add(status, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4.getAccessibleContext().setAccessibleName("");

        org.jdesktop.layout.GroupLayout jPanel21Layout = new org.jdesktop.layout.GroupLayout(jPanel21);
        jPanel21.setLayout(jPanel21Layout);
        jPanel21Layout.setHorizontalGroup(
            jPanel21Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel21Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel21Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel21Layout.setVerticalGroup(
            jPanel21Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel21Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jScrollPane6.setViewportView(jPanel21);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane6)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane6)
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void handlerWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_handlerWindowClosing
        General.showOutput("Now in handlerWindowClosing");
        General.showError("Now in handlerWindowClosing");
        if ( actionListener != null ) {
            actionListener.actionPerformed(null); 
        }
//        isActive = false; // checked in the main so it doesn't exit.
    }//GEN-LAST:event_handlerWindowClosing

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        BareBonesBrowserLaunch.openURL(BMRB_URL);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void hyperlinkUpdateSjors(javax.swing.event.HyperlinkEvent evt) {//GEN-FIRST:event_hyperlinkUpdateSjors
        if (evt.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
            try {
                URL url = evt.getURL();
                if ( url == null ) {
                    messageBoardAddError("Failed to get URL from event.");
                    return;
                }
                BareBonesBrowserLaunch.openURL(url.toString());
            } catch (Exception e) {
                messageBoardAddThrowable(e);
            }
        }
    }//GEN-LAST:event_hyperlinkUpdateSjors

    private void jComboBoxProgramActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxProgramActionPerformed
        jComboBoxType.setModel(getPossibleTypes());
        //messageBoardAdd("Set Type possibilities.",null);
        jComboBoxTypeActionPerformed(evt);
    }//GEN-LAST:event_jComboBoxProgramActionPerformed

    private void jComboBoxSubtypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSubtypeActionPerformed
        jComboBoxFormat.setModel(getPossibleFormats());
        //messageBoardAdd("Set Format possibilities.",null);
        //jComboBoxSubtypeActionPerformed(evt);
    }//GEN-LAST:event_jComboBoxSubtypeActionPerformed

    private void jComboBoxFormatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxFormatActionPerformed
        jRadioButton1.setEnabled(getPossibleLowerbound());
        jRadioButton1.setSelected(false);
        jButtonParse.setEnabled(true);
        //messageBoardAdd("Set Lower Bound possibilities.",null);
        //messageBoardAdd("Selected possible restraint types",null);
    }//GEN-LAST:event_jComboBoxFormatActionPerformed

    private void jComboBoxTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxTypeActionPerformed
        jComboBoxSubtype.setModel(getPossibleSubtypes());
        //messageBoardAdd("Set Subtype possibilities.",null);
        jRadioButton1.setEnabled(getPossibleLowerbound());
        jRadioButton1.setSelected(false);
        jComboBoxSubtypeActionPerformed(evt);
    }//GEN-LAST:event_jComboBoxTypeActionPerformed

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_jRadioButton1ActionPerformed

    private void jButtonOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOpenActionPerformed
        jButtonParse.setEnabled(false);
        jButtonSave.setEnabled(false);
        setAllTypes();
        if ( fc.getFileFilter() != null ) {
            fc.removeChoosableFileFilter(ff);
        }
        fc.setAcceptAllFileFilterUsed(true);
        int returnVal = fc.showOpenDialog(Sjors.this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            file = fc.getSelectedFile();
            //fc.setSelectedFile(null); // don't offer it as the default next time around.
            // doesn't seem to work
            //this is where a real application would open the file.
            if ( !file.canWrite() ) {
                messageBoardAddError("File is not writable: " + file.getName());
                return;
            }
            if ( file.isDirectory() ) {
                messageBoardAddError("File expected is a directory: " + file.getName());
                return;
            }
            jTextFieldInputFile.setText(file.toString());
            messageBoardAdd("Input restraints file set to: " + file.getName());
            setComboBoxTypesEnabled(true);
        } else {
            messageBoardAddError("Open command cancelled by user.");
        }
    }//GEN-LAST:event_jButtonOpenActionPerformed

    private void jPanel1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jPanel1PropertyChange
// TODO add your handling code here:
    }//GEN-LAST:event_jPanel1PropertyChange

    private void jButtonParseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonParseActionPerformed
        mrf = new MRSTARFile();
        
        Object program  = jComboBoxProgram.getSelectedItem();
        Object type     = jComboBoxType.getSelectedItem();
        Object subtype  = jComboBoxSubtype.getSelectedItem();
        Object format   = jComboBoxFormat.getSelectedItem();
        String pdb_id   = "n/a";
        Object[] args = { program, type, subtype, format, pdb_id, file };
        if ( PrimitiveArray.containsNullObject(args)) {
            messageBoardAddError("Failed to find all required input parameters.");
            return;
        }
        String[] argsStr = Strings.toStringArray( args );
        
        // READ
        messageBoardAdd("Parsing file: " + file.toString());
        messageBoardCheckStdOut(); // flush the stream to the log text pane.
        int[] logPositionBegin = Strings.getEndPosition( log.getText());
        //messageBoardAdd("Found logPositionBegin: " + PrimitiveArray.toString(logPositionBegin));

        int[] s = null;
        try {
            s = mrf.read(argsStr);
        } catch ( Throwable t ) {
            messageBoardAddThrowable(t);
            messageBoardAddError("The actual parser crashed with this input file.");
            messageBoardAddError("A crash like this is exceptional.");
            messageBoardAddError("Please consider emailing the input file.");
        }
        if ( s == null ) {
            messageBoardAddError("Error parsing file.");
            return;
        }
        
        messageBoardCheckStdOut(); // flush the stream to the log text pane.
        int[] logPositionEnd = Strings.getEndPosition( log.getText());
        //messageBoardAdd("Found logPositionEnd: " + PrimitiveArray.toString(logPositionEnd));
        
        String logTxt = Strings.getBlock( log.getText(), logPositionBegin, logPositionEnd );
       // messageBoardAdd("Found log block: [" + logTxt + "]");

        s = MRSTARFile.getCountsFromString(logTxt);
        if ( s == null ) {
            messageBoardAddError("Error parsing out from program's own log text above");
            return;
        }
        messageBoardAdd("Parsed "+s[0]+" restraints, "+s[1]+" comments and "+s[2]+" errors.");
        if ( s[0] == 0 ) {
            messageBoardAddError("Parsing found no restraints");            
        } 
        if ( s[2] != 0 ) {
            messageBoardAddError("Save the file and inspect any parse errors.");            
        }        
        jButtonSave.setEnabled(true);
        return;
    }//GEN-LAST:event_jButtonParseActionPerformed

    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
        if ( mrf == null ) {
            messageBoardAddError("Please parse a file before saving results.");
            return;
        }
        fc.addChoosableFileFilter(ff);
        //fc.setAcceptAllFileFilterUsed(false);

        
        if ( file != null ) {
            File f_new = InOut.changeFileNameExtension(file,"str");
            if ( f_new != null ) {
                fc.setSelectedFile(f_new);
            } else {
                messageBoardAddError("Failed to rename extension of previous selected file: [" + file.toString());                
            }
        } else {
            messageBoardAddError("Failed to get previous selected file.");
        }
        
        int returnVal = fc.showSaveDialog(Sjors.this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            outfile = fc.getSelectedFile();
            jTextFieldOutputFile.setText(outfile.toString());
            
            if ( outfile.exists() && (!outfile.canWrite()) ) {
                messageBoardAddError("File exists but is not writable: " + outfile.getName());
                return;
            }
            if ( outfile.isDirectory() ) {
                messageBoardAddError("File expected is a directory: " + outfile.getName());
                return;
            }
            
            messageBoardAdd("Saving parsed restraints to: " + outfile.getName());
            boolean status = false;
            try {
                status = mrf.write(outfile.toString());
            } catch ( Throwable t ) {
                messageBoardAddThrowable(t);
            }
            if ( ! status ) {
                messageBoardAddError("Failed to unparse STAR results");
                return;
            }
            messageBoardAdd("Done");
        } else {
            messageBoardAddError("Save As command cancelled by user.");
        }

    }//GEN-LAST:event_jButtonSaveActionPerformed

    private void fcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fcActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_fcActionPerformed

    private void messageBoardCheckStdOut() {
        try {
            out.flush();
        } catch ( Throwable t ) {
            //
        }
        log.append(out.toString());
        out.reset();
    }
    
    /** Defaults to red */
    private void messageBoardAddError( String msg ) {
        messageBoardAdd("ERROR: " + msg,Color.RED);
    }

    /** Convenience method */
    private void messageBoardAdd( String msg) {
        messageBoardAdd(msg,null);
    }
    
    /** Defaults to black */
    private void messageBoardAdd( String msg, java.awt.Color c) {
        messageBoardCheckStdOut();
        log.append(     msg+newline);
        if ( c == null ) {
            c = Color.BLACK;
        }
        status.setForeground(c);
        status.setText(msg);
    }
    
    /** Defaults to red */
    private void messageBoardAddThrowable( Throwable t ) {
        messageBoardCheckStdOut();
        StringWriter stw = new StringWriter();
        PrintWriter pw = new PrintWriter(stw,true);
        t.printStackTrace(pw);
        String msg = "Found throwable error."+newline+stw.toString();
        messageBoardAddError(msg);
    }
    
    
    private void setAllTypes() {
        jComboBoxProgram.setModel(  getPossiblePrograms());
        jComboBoxType.setModel(     getPossibleTypes());
        jComboBoxSubtype.setModel(  getPossibleSubtypes());
        jComboBoxFormat.setModel(   getPossibleFormats());
        jRadioButton1.setEnabled(false);
        jRadioButton1.setSelected(false);
    }

    private void setComboBoxTypesEnabled( boolean v ) {
        jComboBoxProgram.setEnabled(v);        
        jComboBoxType.setEnabled(v);        
        jComboBoxSubtype.setEnabled(v);        
        jComboBoxFormat.setEnabled(v);                
    }
    
    public DefaultComboBoxModel getPossiblePrograms() {
        ArrayList a = new ArrayList(classi.conversionPossibilities.keySet());
        a.add(0,null);
        if ( a.contains("AMBER") ) {
            a.remove("AMBER");
        }
        Object[] items = a.toArray();        
        DefaultComboBoxModel result = new DefaultComboBoxModel(items);
        return result;
    }
    
    public DefaultComboBoxModel getPossibleTypes() {
        Object key1 = jComboBoxProgram.getSelectedItem();
        HashOfHashes HoH = (HashOfHashes) classi.conversionPossibilities.get(key1);        
        Object[] items = {};
        if ( HoH != null ) {
            ArrayList a = new ArrayList(HoH.keySet());
            a.add(0,null);
            items = a.toArray();        
        }
        DefaultComboBoxModel result = new DefaultComboBoxModel(items);
        if ( result.getSize() == 2 ) {
            result.setSelectedItem(result.getElementAt(1));
        }
        return result;
    }
    public DefaultComboBoxModel getPossibleSubtypes() {
        Object key1 = jComboBoxProgram.getSelectedItem();
        Object key2 = jComboBoxType.getSelectedItem();
        HashMap H = (HashMap) classi.conversionPossibilities.get(key1,key2);
        Object[] items = {};
        if ( H != null ) {
            ArrayList a = new ArrayList(H.keySet());
            a.add(0,null);
            items = a.toArray();        
        }
        DefaultComboBoxModel result = new DefaultComboBoxModel(items);
        if ( result.getSize() == 2 ) {
            result.setSelectedItem(result.getElementAt(1));
        }
        return result;
    }

    public DefaultComboBoxModel getPossibleFormats() {
        Object key1 = jComboBoxProgram.getSelectedItem();
        Object key2 = jComboBoxType.getSelectedItem();
        Object key3 = jComboBoxSubtype.getSelectedItem();
        // make a copy of the list because we'll mute.
        ArrayList H = (ArrayList) classi.conversionPossibilities.get(key1,key2,key3);        
        //messageBoardAdd("possible formats from HoHoH: " + Strings.toString(H),null);
        Object[] items = {};
        if ( H != null ) {
            ArrayList H2 = new ArrayList( H );
            H2.add(0,null);
            items = H2.toArray();
        }
        DefaultComboBoxModel result = new DefaultComboBoxModel(items);
        if ( result.getSize() == 2 ) {
            result.setSelectedItem(result.getElementAt(1));
            jButtonParse.setEnabled(true); // this is for when it gets set automatically.            
        }
        return result;
    }
    
    public boolean getPossibleLowerbound() {
        Object key1 = jComboBoxProgram.getSelectedItem();
        Object key2 = jComboBoxType.getSelectedItem();
        if ( (key1 == null) || (key2 == null) ) {
            return false;
        }
        if ( key1.equals("DYANA/DIANA") &&
             key2.equals("distance")) {
            return true;
        }
        return false;
    }
        
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Sjors().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFileChooser fc;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonOpen;
    private javax.swing.JButton jButtonParse;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JComboBox jComboBoxFormat;
    private javax.swing.JComboBox jComboBoxProgram;
    private javax.swing.JComboBox jComboBoxSubtype;
    private javax.swing.JComboBox jComboBoxType;
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JEditorPane jEditorPane2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanelCredits;
    private javax.swing.JPanel jPanelInfo;
    private javax.swing.JPanel jPanelLog;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextFieldInputFile;
    private javax.swing.JTextField jTextFieldOutputFile;
    private javax.swing.JTextArea log;
    private javax.swing.JLabel status;
    // End of variables declaration//GEN-END:variables
}
