package Wattos.CloneWars.Gui;

import Wattos.CloneWars.*;
import Wattos.Episode_II.*;
import Wattos.Utils.*;
import edu.oswego.cs.dl.util.concurrent.misc.*;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.lang.reflect.*;
import java.net.*;
import javax.swing.*;
import javax.swing.event.*; 
import org.jdesktop.layout.*;
import org.jmol.adapter.smarter.SmarterJmolAdapter;
import org.jmol.api.JmolAdapter;
import org.jmol.api.JmolSimpleViewer;

public class WattosGui extends JFrame implements ActionListener {
    
    private static final long serialVersionUID = -1207795172754062330L;
    
    static private final String         newline = "\n";
/*    static private File                 file = null;
    static private File                 outfile = null;
    static private Classification       classi = null;
    */
//    static private StarFilter           ff = null;
    static private final String         BMRB_URL            = "http://www.bmrb.wisc.edu";
    static private final String         WATTOS_URL          = BMRB_URL + "/wattos";
    static private final String         COMPLETENESS_URL    = WATTOS_URL + "/doc/Wattos/Soup/Constraint/Completeness.html";
    static private final String         VIOL_URL            = WATTOS_URL + "/doc/Wattos/Soup/Constraint/DistConstr.html#showPlotPerResidue";
    
    static final String strScript = "delay; move 360 0 0 0 0 0 0 0 4;";
    
    static private PrintStream          stdout = null;
//    static private PrintStream          stderr = null;
    static private String               fn = null;
    static private URL                  url = null;
    static private UserInterface        ui = null;
    ActionListener actionListener = null;
    
    static int                          TAB_IDX_LOG     = 0;
    static int                          TAB_IDX_MODULE  = 1;
    static int                          TAB_IDX_3D      = 2;
    static int                          TAB_IDX_COMPL   = 3;
    static int                          TAB_IDX_VIOL    = 4;
    
    public static JmolPanel jmolPanel = null;
    public static JmolSimpleViewer viewer = null;
    /** Wattos Graphical user interface. Actionlistener for windows closing maybe null.
     *If it is null then the dispose method will be called on exit.
     */
    public WattosGui(UserInterface ui, ActionListener actionListener) {
        this.actionListener = actionListener;
        if ( this.actionListener == null ) {
            this.actionListener = this; // If nobody wants to listen it doesn't stop talking.
        }
        initComponents();
        init(ui);
    }
    
    
    public boolean init(UserInterface ui) {
        General.verbosity = General.verbosityDebug;
        WattosGui.ui = ui;
        // Only worry about stdout, Wattos doesn't use stderr.
        WattosGui.stdout = new PrintStream( new WattosGuiOutputStream( log, status ) );
        General.setOut(stdout);
        jRadioButtonMenuItemVerbosity.getModel().setSelected(General.verbosity == General.verbosityDebug);
        jTabbedPane.setEnabledAt( TAB_IDX_MODULE,   false );
        jTabbedPane.setEnabledAt( TAB_IDX_3D,       true );
        jTabbedPane.setEnabledAt( TAB_IDX_COMPL,    false );
        jTabbedPane.setEnabledAt( TAB_IDX_VIOL,     false );
        
//        this.ff = new StarFilter();                
        return true;
    }
    
    public boolean show3D(URL url) {
        jmolPanel = new JmolPanel();
        setJPanelToBeFilled(-1, jmolPanel );
        viewer = jmolPanel.getViewer();
        //    viewer.openFile("../samples/caffeine.xyz");
        viewer.openFile(url.toString());
        //viewer.openFile("P:/nozip/data/structures/all/pdb/pdb1brv.ent");
        //viewer.openFile("S:/jurgen/CloneWars/DOCR1000/_tmp_unb_/jfd/1krw_smallest.pdb");
//        viewer.openStringInline(strXyzHOH);
        viewer.evalString(strScript);
        String strError = viewer.getOpenFileError();
        if (strError != null) {
          General.showError(strError);
        }
        
        return true;
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jDialog1 = new javax.swing.JDialog();
        jScrollPaneOverall = new javax.swing.JScrollPane();
        jPanelOverall = new javax.swing.JPanel();
        status = new javax.swing.JLabel();
        jTabbedPane = new javax.swing.JTabbedPane();
        jPanelLog = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        log = new javax.swing.JTextArea();
        jPanelModuleInfo = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();
        jPanel3D = new javax.swing.JPanel();
        jPanelCompleteness = new javax.swing.JPanel();
        jPanelToBeFilled = new javax.swing.JPanel();
        jPanelViolation = new javax.swing.JPanel();
        jPanelToBeFilled1 = new javax.swing.JPanel();
        jMenuBar = new javax.swing.JMenuBar();
        jMenuFile = new javax.swing.JMenu();
        jMenuItemInitAll = new javax.swing.JMenuItem();
        jMenuItemMacro = new javax.swing.JMenu();
        jMenuItemExecuteMacroUser = new javax.swing.JMenuItem();
        jMenuItemSleep = new javax.swing.JMenuItem();
        jMenuItemQuit = new javax.swing.JMenuItem();
        jMenuEdit = new javax.swing.JMenu();
        jMenuTools = new javax.swing.JMenu();
        jRadioButtonMenuItemVerbosity = new javax.swing.JRadioButtonMenuItem();
        jMenuWindow = new javax.swing.JMenu();
        jMenuItemCloseWindow = new javax.swing.JMenuItem();
        jMenuHelp = new javax.swing.JMenu();
        jMenuItemBMRBHomePage = new javax.swing.JMenuItem();
        jMenuItemWattosHomePage = new javax.swing.JMenuItem();
        jMenuItemModuleComplInfo = new javax.swing.JMenuItem();
        jMenuItemModuleViolInfo = new javax.swing.JMenuItem();
        jMenuItemAbout = new javax.swing.JMenuItem();

        jDialog1.setTitle("Warning");
        jDialog1.setAlwaysOnTop(true);
        jDialog1.setModal(true);
        jDialog1.setName("Warning");
        org.jdesktop.layout.GroupLayout jDialog1Layout = new org.jdesktop.layout.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 400, Short.MAX_VALUE)
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Wattos");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                windowClosingHandler(evt);
            }
            public void windowClosed(java.awt.event.WindowEvent evt) {
                System.out.println("Shutting down...");
                System.exit(0);
              }                        
        });

        getAccessibleContext().setAccessibleDescription("Wattos\n");
        jScrollPaneOverall.setBorder(null);
        jScrollPaneOverall.setPreferredSize(new java.awt.Dimension(20, 20));
        status.setText("Please find a log of output messages in the 'Log' tab below");
        status.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        status.setVerticalTextPosition(javax.swing.SwingConstants.TOP);

        jTabbedPane.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        jTabbedPane.setFocusable(false);
        jTabbedPane.setPreferredSize(new java.awt.Dimension(300, 100));
        jPanelLog.setName("");
        log.setColumns(20);
        log.setEditable(false);
        log.setFont(new java.awt.Font("Courier New", 0, 12));
        log.setRows(5);
        jScrollPane3.setViewportView(log);

        org.jdesktop.layout.GroupLayout jPanelLogLayout = new org.jdesktop.layout.GroupLayout(jPanelLog);
        jPanelLog.setLayout(jPanelLogLayout);
        jPanelLogLayout.setHorizontalGroup(
            jPanelLogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelLogLayout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 481, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanelLogLayout.setVerticalGroup(
            jPanelLogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelLogLayout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 273, Short.MAX_VALUE)
                .addContainerGap())
        );
        jTabbedPane.addTab("Log", jPanelLog);

        jPanelModuleInfo.setName("");
        jScrollPane2.setMinimumSize(null);
        jEditorPane1.setEditable(false);
        jEditorPane1.setMinimumSize(new java.awt.Dimension(0, 22));
        fn = "Data/SjorsInfo.html";
        url = Sjors.class.getResource( fn);
        if (url != null) {
            try {
                jEditorPane1.setPage(url);
            } catch (IOException e) {
                General.showError("Attempted to read a bad URL: " + url);
            }
        } else {
            General.showError("Failed to find resource: " + fn);
        }

        jEditorPane1.addHyperlinkListener(new javax.swing.event.HyperlinkListener() {
            public void hyperlinkUpdate(javax.swing.event.HyperlinkEvent evt) {
                jEditorPane1hyperlinkUpdateSjors(evt);
            }
        });

        jScrollPane2.setViewportView(jEditorPane1);

        org.jdesktop.layout.GroupLayout jPanelModuleInfoLayout = new org.jdesktop.layout.GroupLayout(jPanelModuleInfo);
        jPanelModuleInfo.setLayout(jPanelModuleInfoLayout);
        jPanelModuleInfoLayout.setHorizontalGroup(
            jPanelModuleInfoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanelModuleInfoLayout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 481, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanelModuleInfoLayout.setVerticalGroup(
            jPanelModuleInfoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanelModuleInfoLayout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 273, Short.MAX_VALUE)
                .addContainerGap())
        );
        jTabbedPane.addTab("Module Info", jPanelModuleInfo);

        jPanel3D.setEnabled(false);
        jPanel3D.setName("");
        org.jdesktop.layout.GroupLayout jPanel3DLayout = new org.jdesktop.layout.GroupLayout(jPanel3D);
        jPanel3D.setLayout(jPanel3DLayout);
        jPanel3DLayout.setHorizontalGroup(
            jPanel3DLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 505, Short.MAX_VALUE)
        );
        jPanel3DLayout.setVerticalGroup(
            jPanel3DLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 299, Short.MAX_VALUE)
        );
        jTabbedPane.addTab("3D", jPanel3D);

        jPanelToBeFilled.setBackground(new java.awt.Color(246, 246, 209));
        org.jdesktop.layout.GroupLayout jPanelToBeFilledLayout = new org.jdesktop.layout.GroupLayout(jPanelToBeFilled);
        jPanelToBeFilled.setLayout(jPanelToBeFilledLayout);
        jPanelToBeFilledLayout.setHorizontalGroup(
            jPanelToBeFilledLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 481, Short.MAX_VALUE)
        );
        jPanelToBeFilledLayout.setVerticalGroup(
            jPanelToBeFilledLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 286, Short.MAX_VALUE)
        );

        org.jdesktop.layout.GroupLayout jPanelCompletenessLayout = new org.jdesktop.layout.GroupLayout(jPanelCompleteness);
        jPanelCompleteness.setLayout(jPanelCompletenessLayout);
        jPanelCompletenessLayout.setHorizontalGroup(
            jPanelCompletenessLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelCompletenessLayout.createSequentialGroup()
                .addContainerGap()
                .add(jPanelToBeFilled, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanelCompletenessLayout.setVerticalGroup(
            jPanelCompletenessLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelCompletenessLayout.createSequentialGroup()
                .add(jPanelToBeFilled, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jTabbedPane.addTab("Completeness", jPanelCompleteness);

        jPanelViolation.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanelViolation.setEnabled(false);
        jPanelToBeFilled1.setBackground(new java.awt.Color(246, 246, 209));
        org.jdesktop.layout.GroupLayout jPanelToBeFilled1Layout = new org.jdesktop.layout.GroupLayout(jPanelToBeFilled1);
        jPanelToBeFilled1.setLayout(jPanelToBeFilled1Layout);
        jPanelToBeFilled1Layout.setHorizontalGroup(
            jPanelToBeFilled1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 481, Short.MAX_VALUE)
        );
        jPanelToBeFilled1Layout.setVerticalGroup(
            jPanelToBeFilled1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 286, Short.MAX_VALUE)
        );

        org.jdesktop.layout.GroupLayout jPanelViolationLayout = new org.jdesktop.layout.GroupLayout(jPanelViolation);
        jPanelViolation.setLayout(jPanelViolationLayout);
        jPanelViolationLayout.setHorizontalGroup(
            jPanelViolationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelToBeFilled1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        );
        jPanelViolationLayout.setVerticalGroup(
            jPanelViolationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelToBeFilled1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        );
        jTabbedPane.addTab("Violation", jPanelViolation);
        jPanelViolation.getAccessibleContext().setAccessibleName("Violation");

        jTabbedPane.setSelectedIndex(0);

        org.jdesktop.layout.GroupLayout jPanelOverallLayout = new org.jdesktop.layout.GroupLayout(jPanelOverall);
        jPanelOverall.setLayout(jPanelOverallLayout);
        jPanelOverallLayout.setHorizontalGroup(
            jPanelOverallLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jTabbedPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 510, Short.MAX_VALUE)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanelOverallLayout.createSequentialGroup()
                .addContainerGap()
                .add(status, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 486, Short.MAX_VALUE)
                .add(12, 12, 12))
        );
        jPanelOverallLayout.setVerticalGroup(
            jPanelOverallLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelOverallLayout.createSequentialGroup()
                .add(status)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jTabbedPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 329, Short.MAX_VALUE))
        );
        jScrollPaneOverall.setViewportView(jPanelOverall);

        jMenuFile.setText("File");
        jMenuItemInitAll.setText("InitAll");
        jMenuItemInitAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemInitAllActionPerformed(evt);
            }
        });

        jMenuFile.add(jMenuItemInitAll);

        jMenuItemMacro.setText("Menu");
        jMenuItemExecuteMacroUser.setText("ExecuteMacroUser");
        jMenuItemExecuteMacroUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemExecuteMacroUserActionPerformed(evt);
            }
        });

        jMenuItemMacro.add(jMenuItemExecuteMacroUser);

        jMenuFile.add(jMenuItemMacro);

        jMenuItemSleep.setText("Sleep");
        jMenuItemSleep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSleepActionPerformed(evt);
            }
        });

        jMenuFile.add(jMenuItemSleep);

        jMenuItemQuit.setText("Quit");
        jMenuItemQuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemQuitActionPerformed(evt);
            }
        });

        jMenuFile.add(jMenuItemQuit);

        jMenuBar.add(jMenuFile);

        jMenuEdit.setText("Edit");
        jMenuEdit.setEnabled(false);
        jMenuBar.add(jMenuEdit);

        jMenuTools.setText("Tools");
        jRadioButtonMenuItemVerbosity.setText("Debug Verbosity ");
        jRadioButtonMenuItemVerbosity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonMenuItemVerbosityActionPerformed(evt);
            }
        });

        jMenuTools.add(jRadioButtonMenuItemVerbosity);

        jMenuBar.add(jMenuTools);

        jMenuWindow.setText("Window");
        jMenuItemCloseWindow.setText("Close Window");
        jMenuItemCloseWindow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                handlerCloseTab(evt);
            }
        });

        jMenuWindow.add(jMenuItemCloseWindow);

        jMenuBar.add(jMenuWindow);

        jMenuHelp.setText("Help");
        jMenuItemBMRBHomePage.setText("BMRB Homepage");
        jMenuItemBMRBHomePage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemBMRBHomePageActionPerformed(evt);
            }
        });

        jMenuHelp.add(jMenuItemBMRBHomePage);

        jMenuItemWattosHomePage.setText("Wattos Homepage");
        jMenuItemWattosHomePage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                handlerShowWattosHomePage(evt);
            }
        });

        jMenuHelp.add(jMenuItemWattosHomePage);

        jMenuItemModuleComplInfo.setText("Module Completeness Info");
        jMenuItemModuleComplInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemModuleComplInfoActionPerformed(evt);
            }
        });

        jMenuHelp.add(jMenuItemModuleComplInfo);

        jMenuItemModuleViolInfo.setText("Module Violation Info");
        jMenuItemModuleViolInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemModuleViolInfoActionPerformed(evt);
            }
        });

        jMenuHelp.add(jMenuItemModuleViolInfo);

        jMenuItemAbout.setText("About");
        jMenuHelp.add(jMenuItemAbout);

        jMenuBar.add(jMenuHelp);

        setJMenuBar(jMenuBar);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPaneOverall, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 510, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPaneOverall, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 352, Short.MAX_VALUE)
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void jMenuItemModuleViolInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemModuleViolInfoActionPerformed
        BareBonesBrowserLaunch.openURL(VIOL_URL);
    }//GEN-LAST:event_jMenuItemModuleViolInfoActionPerformed
    
    private void jMenuItemModuleComplInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemModuleComplInfoActionPerformed
        BareBonesBrowserLaunch.openURL(COMPLETENESS_URL);
    }//GEN-LAST:event_jMenuItemModuleComplInfoActionPerformed
    
    private void jEditorPane1hyperlinkUpdateSjors(javax.swing.event.HyperlinkEvent evt) {//GEN-FIRST:event_jEditorPane1hyperlinkUpdateSjors
        if (evt.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
            try {
                URL url = evt.getURL();
                if ( url == null ) {
                    messageBoardAddError("Failed to get URL from event.");
                    return;
                }
                BareBonesBrowserLaunch.openURL(url.toString());
            } catch (Exception e) {
                messageBoardAddThrowable(e);
            }
        }
    }//GEN-LAST:event_jEditorPane1hyperlinkUpdateSjors
    
    private void jMenuItemBMRBHomePageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemBMRBHomePageActionPerformed
        BareBonesBrowserLaunch.openURL(BMRB_URL);
    }//GEN-LAST:event_jMenuItemBMRBHomePageActionPerformed
    
    private void handlerShowWattosHomePage(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_handlerShowWattosHomePage
        BareBonesBrowserLaunch.openURL(WATTOS_URL);
    }//GEN-LAST:event_handlerShowWattosHomePage
    
    private void handlerCloseTab(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_handlerCloseTab
// TODO add your handling code here:
        int selectedPaneIdx = jTabbedPane.getSelectedIndex();
        if ( selectedPaneIdx == -1 ) {
            JOptionPane.showMessageDialog(this, "Failed to get selected pane for closing.");
            return;
        }
        if ( (selectedPaneIdx >= 0) && (selectedPaneIdx <= 2 )) {
            JOptionPane.showMessageDialog(this, "Currently selected system pane can not be closed.");
            return;
        }
        
        //default icon, custom title
        int n = JOptionPane.showConfirmDialog(
                this,
                "Closing the currently selected panel\ncan not be undone. Proceed with close?",
                "Confirm closing panel",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE);
        if ( n == 0 ) {
            General.showDebug("Removing selected panel.");
            jTabbedPane.remove(selectedPaneIdx);
        } else {
            General.showDebug("Canceled remove of selected panel.");
        }
        
    }//GEN-LAST:event_handlerCloseTab
    
    private void jRadioButtonMenuItemVerbosityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonMenuItemVerbosityActionPerformed
        if ( jRadioButtonMenuItemVerbosity.getModel().isSelected()) {
            General.verbosity = General.verbosityDebug;
        } else {
            General.verbosity = General.verbosityOutput;
        }
    }//GEN-LAST:event_jRadioButtonMenuItemVerbosityActionPerformed
    
    private void jMenuItemExecuteMacroUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemExecuteMacroUserActionPerformed
        General.showDebug("Now in jMenuItemExecuteMacroUserActionPerformed");
//        messageBoardCheckStdOut();
        WattosParameterList parametersToGet = new WattosParameterList();
        WattosParameter par_url = new WattosParameter();
        par_url.type = WattosParameter.TYPE_URL;
        par_url.prompt = "Enter url to (gzipped) Wattos script file:";
        par_url.examples.add("C:/jurgen/Wattos/macros/CheckCompleteness.wcf");
        par_url.examples.add("http://www.bmrb.wisc.edu/wattos/macros/QuitBeforeBegun.wcf");
        par_url.examples.add("C:\\my\\Wattos\\macros\\QuitBeforeBegun.wcf");
        par_url.defaultValue = par_url.examples.getString(0);
        par_url.allowedValues = null; // anthing goes.
        parametersToGet.add(par_url);
        
//        if ( ! getParameters(parametersToGet)) {
//            // just fail for now.
//        }
        
        new WattosParameterSetDialog(this,true);
        par_url.value = par_url.examples.getString(0);
        URL url = InOut.getUrlFileFromName( par_url.value );
        Object[] methodArgs = new Object[] { url };
        String myMethodName = new Exception().getStackTrace()[0].getMethodName();
        executeCommand("ExecuteMacroUser", methodArgs, myMethodName);
    }//GEN-LAST:event_jMenuItemExecuteMacroUserActionPerformed
    
    public void executeCommand( String methodName, Object[] methodArgs, String parentMethodName ) {
        Class[] classList = new Class[] { Object[].class };
        try {
            Method commandMethod = ui.commandHub.getClass().getMethod(methodName, classList);
            General.showDebug("Discovered method: " + Strings.toString(commandMethod));
            General.showDebug("will be used on object ui.commandHub: " + ui.commandHub );
            // Pack them once more...;-) You got to love Java.
            final Object[] args = new Object[] { methodArgs };
            WattosSwingWorker worker = new WattosSwingWorker(commandMethod, ui.commandHub,
                    args, this, parentMethodName);
            worker.start();
        } catch (Throwable t) {
            General.showThrowable(t);
            return;
        }
    }
    
    public boolean afterEachCommandExecuted(String methodName, Object[] methodArgs) {
        General.showDebug( "Done with method: "+methodName+" with arguments: " + PrimitiveArray.toString( methodArgs ) );
        return true;
    }
    
    private void windowClosingHandler(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_windowClosingHandler
        if ( actionListener != null ) {
            actionListener.actionPerformed(null);
        }
    }//GEN-LAST:event_windowClosingHandler
    
    private void jMenuItemQuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemQuitActionPerformed
        setVisible(false);
        windowClosingHandler(null);
    }//GEN-LAST:event_jMenuItemQuitActionPerformed
    
    private void jMenuItemSleepActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSleepActionPerformed
        int sleepytime = 5*1000;
        General.showDebug("From gui calling Sleep " + sleepytime);
        Object[] methodArgs = new Object[] { new Integer(sleepytime) };
        String myMethodName = new Exception().getStackTrace()[0].getMethodName();
        executeCommand("Sleep", methodArgs, myMethodName);
    }//GEN-LAST:event_jMenuItemSleepActionPerformed
    
    private void jMenuItemInitAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemInitAllActionPerformed
        General.showDebug("Doing ui.commandHub.InitAll()");
        if ( ui == null ) {
            General.showError("ui == null");
        }
        if ( ui.commandHub == null ) {
            General.showError("ui.commandHub == null");
        }
        ui.commandHub.InitAll();
        Object[] methodArgs = { };
        afterEachCommandExecuted(new Exception().getStackTrace()[0].getMethodName(),methodArgs);
    }//GEN-LAST:event_jMenuItemInitAllActionPerformed
    
//    public void messageBoardCheckStdOut() {
//        try {
//            out.flush();
//        } catch ( Throwable t ) {
//            //
//        }
//        log.append(out.toString());
//        out.reset();
//    }
    
    /** Defaults to red */
    private void messageBoardAddError( String msg ) {
        messageBoardAdd("ERROR: " + msg,Color.RED);
    }
    
//    /** Convenience method */
//    private void messageBoardAdd( String msg) {
//        messageBoardAdd(msg,null);
//    }
    
    /** Defaults to black */
    private void messageBoardAdd( String msg, java.awt.Color c) {
//        messageBoardCheckStdOut();
        General.showOutput(msg);
        if ( c == null ) {
            c = Color.BLACK;
        }
        status.setForeground(c);
        status.setText(msg);
    }
    
    /** Defaults to red */
    private void messageBoardAddThrowable( Throwable t ) {
//        messageBoardCheckStdOut();
        StringWriter stw = new StringWriter();
        PrintWriter pw = new PrintWriter(stw,true);
        t.printStackTrace(pw);
        String msg = "Found throwable error."+newline+stw.toString();
        messageBoardAddError(msg);
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        boolean ignoreOldDumpIfPresent = false;
        final UserInterface ui = UserInterface.init(ignoreOldDumpIfPresent);
        final WattosGui gui = new WattosGui(ui,null);
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                gui.setVisible(true);
            }
        });
    }
    
    /** Calls interupt so make sure no other components are on the same
     *thread. This method should only be called when this frame is the
     *only application.
     */
    public void actionPerformed(ActionEvent e) {
        Thread.currentThread().interrupt();
        dispose();
    }
    
    /** Use -1 for 3D, 0 for completeness and 1 for violation panel
     */
    public void setJPanelToBeFilled( int panelToFillIdx, final JPanel jPanel ) {
        JPanel jPanelToFill = null;
        int jPanelToFillTabIdx = TAB_IDX_COMPL;
        if ( panelToFillIdx == 0 ) {
            jPanelToFill = jPanelCompleteness;
            jPanelToFillTabIdx = TAB_IDX_COMPL;
        } else if ( panelToFillIdx == 1 ) {
            jPanelToFill = jPanelViolation;
            jPanelToFillTabIdx = TAB_IDX_VIOL;
        } else if ( panelToFillIdx == -1 ) {
            jPanelToFill = jPanel3D;
            jPanelToFillTabIdx = TAB_IDX_3D;
        } else {
            General.showError("panelToFillIdx: " + panelToFillIdx + " is not specified.");
            return;
        }
        final JPanel jPanelToFillFinal       = jPanelToFill;
        final int    jPanelToFillTabIdxFinal = jPanelToFillTabIdx;
        
        final edu.oswego.cs.dl.util.concurrent.misc.SwingWorker worker = new edu.oswego.cs.dl.util.concurrent.misc.SwingWorker() {
            public Object construct() {
                jPanelToFillFinal.removeAll();
                
                try {
                    org.jdesktop.layout.GroupLayout jPanelLayout = new org.jdesktop.layout.GroupLayout(jPanelToFillFinal);
                    jPanelToFillFinal.setLayout(jPanelLayout);
                    jPanelLayout.setHorizontalGroup(
                            jPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanelLayout.createSequentialGroup()
                            .addContainerGap()
                            .add(jPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addContainerGap())
                            );
                    jPanelLayout.setVerticalGroup(
                            jPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanelLayout.createSequentialGroup()
                            .addContainerGap()
                            .add(jPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addContainerGap())
                            );
                } catch ( Throwable t ) {
                    General.showThrowable(t);
                }
                jTabbedPane.setSelectedComponent(jPanelToFillFinal);
                jTabbedPane.setEnabledAt( jPanelToFillTabIdxFinal, true );
                return null;  //return value not used by this program
            }
        };
        worker.start();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog jDialog1;
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JMenuBar jMenuBar;
    private javax.swing.JMenu jMenuEdit;
    private javax.swing.JMenu jMenuFile;
    private javax.swing.JMenu jMenuHelp;
    private javax.swing.JMenuItem jMenuItemAbout;
    private javax.swing.JMenuItem jMenuItemBMRBHomePage;
    private javax.swing.JMenuItem jMenuItemCloseWindow;
    private javax.swing.JMenuItem jMenuItemExecuteMacroUser;
    private javax.swing.JMenuItem jMenuItemInitAll;
    private javax.swing.JMenu jMenuItemMacro;
    private javax.swing.JMenuItem jMenuItemModuleComplInfo;
    private javax.swing.JMenuItem jMenuItemModuleViolInfo;
    private javax.swing.JMenuItem jMenuItemQuit;
    private javax.swing.JMenuItem jMenuItemSleep;
    private javax.swing.JMenuItem jMenuItemWattosHomePage;
    private javax.swing.JMenu jMenuTools;
    private javax.swing.JMenu jMenuWindow;
    private javax.swing.JPanel jPanel3D;
    private javax.swing.JPanel jPanelCompleteness;
    private javax.swing.JPanel jPanelLog;
    private javax.swing.JPanel jPanelModuleInfo;
    private javax.swing.JPanel jPanelOverall;
    private javax.swing.JPanel jPanelToBeFilled;
    private javax.swing.JPanel jPanelToBeFilled1;
    private javax.swing.JPanel jPanelViolation;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItemVerbosity;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPaneOverall;
    private javax.swing.JTabbedPane jTabbedPane;
    private javax.swing.JTextArea log;
    private javax.swing.JLabel status;
    // End of variables declaration//GEN-END:variables
    
    static class JmolPanel extends JPanel {
        private static final long serialVersionUID = -788183597095243392L;
        JmolSimpleViewer viewer;
        JmolAdapter adapter;
        JmolPanel() {
            adapter = new SmarterJmolAdapter(null);
            viewer = JmolSimpleViewer.allocateSimpleViewer(this, adapter);
        }
        
        public JmolSimpleViewer getViewer() {
            return viewer;
        }
        
        final Dimension currentSize = new Dimension();
        final Rectangle rectClip = new Rectangle();
        
        public void paint(Graphics g) {
            getSize(currentSize);
            g.getClipBounds(rectClip);
            viewer.renderScreenImage(g, currentSize, rectClip);
        }
    }
}
