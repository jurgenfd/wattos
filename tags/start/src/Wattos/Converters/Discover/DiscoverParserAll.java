/* Generated By:JavaCC: Do not edit this line. DiscoverParserAll.java */
package Wattos.Converters.Discover;

import Wattos.Utils.*;
import Wattos.Converters.Discover.Utils;
import Wattos.Converters.Common.*;

import java.util.*;
import java.io.*;

/**
 * @author  Jurgen Doreleijers
 * @version 0.1
 */

public class DiscoverParserAll implements DiscoverParserAllConstants {

    // Type of data to parse
    static int data_type = Varia.DATA_TYPE_DISTANCE;

    //parser stack to store ASSI statement
    static Vector stack;
    //Store all comments
    static Vector cmtStack;
    //Store all error lines for second pass
    static Vector errLineStack;
    //Store all errors from second pass
    static Vector errStack;

    //Store most recently parsed Assi line and col 
    //used by error recording later, for second pass
    //scanning for errors
    static int lastAssiLine;
    static int lastAssiCol;

    /**Constructor
     */
    public DiscoverParserAll() {
        init();
    }

    public void init() {
        stack           = new Vector();
        cmtStack        = new Vector();
        errLineStack    = new Vector();
        errStack        = new Vector();
    }

    /**Start parsing of Discover file 
     */
    public void parse(String DiscoverName, int type) {
        String inputFile = DiscoverName;
        data_type = type;
        try{
            /* Check first if file ends with an end of line, if not, 
                append an extra "\n" before EOF as this would cause problems later on
                */
            RandomAccessFile inputRead = new RandomAccessFile(inputFile, "r");
            long inputBytes = inputRead.length() - 1;
            //forward file pointer to last byte char in file
            inputRead.seek(inputBytes);
            char lastChar = (char)(inputRead.read());
            if (lastChar != '\n' && lastChar != '\r') {
                inputRead.close();
                // Open an appending writer
                PrintWriter input = new PrintWriter(new BufferedWriter(new FileWriter(DiscoverName, true)));
                input.print('\n');
                input.close();
            }
            else
                inputRead.close();

            ReInit( new java.io.FileInputStream(DiscoverName) );
            getInput();

            //second pass processing errors
            Utils.saveErrors(inputFile, errLineStack, errStack);
        }
        catch (FileNotFoundException e) {
            General.showOutput("FileNotFoundException opening " + DiscoverName );
            General.showThrowable(e);
        }
        catch (ParseException e) {
            General.showOutput("ParseException parsing " + DiscoverName );
            General.showThrowable(e);
        }
        catch (IOException e) {
            General.showOutput("IOException in parse method" );
            General.showThrowable(e);
        }
    }


    void getInput() throws ParseException {
        switch ( data_type ) {
            case Varia.DATA_TYPE_DISTANCE:
                getInputDistanceConstraints();
                break;
            case Varia.DATA_TYPE_DIHEDRAL:
                getInputDihedralConstraints();
                break;
            case Varia.DATA_TYPE_DIPOLAR_COUPLING:
                General.showWarning("Not implemented yet: DATA_TYPE_DIPOLAR_COUPLING");
                break;
            case Varia.DATA_TYPE_CHEMICAL_SHIFT:
                General.showWarning("Not implemented yet: DATA_TYPE_CHEMICAL_SHIFT");
                break;
            case Varia.DATA_TYPE_COUPLING_CONSTANT:
                General.showWarning("Not implemented yet: DATA_TYPE_COUPLING_CONSTANT");
                break;
            case Varia.DATA_TYPE_PLANARITY:
                General.showWarning("Not implemented yet: DATA_TYPE_PLANARITY");
                break;
            default:
                General.showWarning("Unknown data type: " + data_type );
                break;
        }
    }

    /**return Vector storing all data
     * every element is a LogicalNode object
     */
    public Vector popResult() {
        return stack;
    }


    /**return Vector storing all comments
     * every element is a Comment object
     */
    public Vector popComment() {
        return cmtStack;
    }


    /**return Vector storing all errors
     * every element is an ErrorLine object
     */
    public Vector popError() {
        return errStack;
    }

  static final public void getInputDistanceConstraints() throws ParseException {
    boolean results = false;
    try {
      ListDistance();

    } catch (ParserDoneException e) {
        if (getNextToken().kind != EOF) {
            General.showOutput("Caught ParserDone");
        }
    }
  }

  static final public void ListDistance() throws ParseException, ParserDoneException {
    int[] coor = Utils.storeBeginOfRestraint();
    lastAssiLine    = coor[0];
    lastAssiCol     = coor[1];
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        PlusDefinition();
        break;
      default:
        jj_la1[0] = jj_gen;
        DistanceRestraint();
      }
      ListDistance();

    } catch (ParseException e) {
        //General.showDebug("ParseException caught by deep in: ListDistance");
        error_skipto(ATOM_ID);
    }
  }

  static final public void PlusDefinition() throws ParseException, ParserDoneException {
    String atom_id1, atom_id2;
    int[] coor = Utils.storeBeginOfRestraint();
    lastAssiLine    = coor[0];
    lastAssiCol     = coor[1];
    Plus();
    atom_id1 = AtomId();
    atom_id2 = AtomId();
        Utils.saveDistancePlus( stack, atom_id1, atom_id2 );
  }

  static final public void DistanceRestraint() throws ParseException, ParserDoneException {
    String atom_id1, atom_id2, lower, upper;
    String force_const_lower=null, force_const_upper=null, force_max=null;
    String target = null;
    String bogus_var = null;
    String n1=null, n2=null, n3=null, n4=null;

    int[] coor = Utils.storeBeginOfRestraint();
    lastAssiLine    = coor[0];
    lastAssiCol     = coor[1];
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ATOM_ID:
        atom_id1 = AtomId();
        atom_id2 = AtomId();
        lower = Number();
        upper = Number();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUMBER:
          n1 = Number();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NUMBER:
            n2 = Number();
            n3 = Number();
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case NUMBER:
              n4 = Number();
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case NUMBER:
                bogus_var = Number();
                break;
              default:
                jj_la1[1] = jj_gen;
                ;
              }
              break;
            default:
              jj_la1[2] = jj_gen;
              ;
            }
            break;
          default:
            jj_la1[3] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[4] = jj_gen;
          ;
        }
            /** Cover the following examples 
            1:U_27:H3          1:A_43:N1                  2.000 4.500                              
            1:U_27:H3          1:A_43:N1          -1.000  2.000 4.500                              
            1:U_27:H3          1:A_43:N1           1.600  2.000       50.00 50.00 10000.000
            1:U_27:H3          1:A_43:N1          -1.000  2.000 4.500 50.00 50.00 10000.000
            1:GLY_1:HN         1:GLY_1:HA          2.300  3.500 2.900  1.00  1.00 1000.000  0.00
            */

            if ( n1 == null ) {
                /** Example I */
            } else if ( n2 == null ) {
                /** Example II */
                target = n1;
            } else if ( n4 == null ) {
                /** Example III */
                force_const_lower = n1;
                force_const_upper = n2;
                force_max         = n3;
            } else {
                /** Example IV and V */
                target            = n1;
                force_const_lower = n2;
                force_const_upper = n3;
                force_max         = n4;
            }

            Utils.saveDistanceNormal( stack,
                atom_id1, atom_id2, lower, upper,
                target, force_const_lower, force_const_upper, force_max );
        break;
      default:
        jj_la1[5] = jj_gen;
        error_skipto(ATOM_ID);
      }
    } catch (ParseException e) {
        //General.showDebug("ParseException caught by deep in: DistanceRestraint");
        error_skipto(ATOM_ID);
    }
  }

  static final public void getInputDihedralConstraints() throws ParseException {
    boolean results = false;
    try {
      ListDihedral();

    } catch (ParserDoneException e) {
        if (getNextToken().kind != EOF) {
            General.showOutput("Caught ParserDone");
        }
    }
  }

  static final public void ListDihedral() throws ParseException, ParserDoneException {
    int[] coor = Utils.storeBeginOfRestraint();
    lastAssiLine    = coor[0];
    lastAssiCol     = coor[1];
    try {
      DihedralRestraint();
      ListDihedral();

    } catch (ParseException e) {
        //General.showDebug("ParseException caught by deep in: ListDihedral");
        error_skipto(ATOM_ID);
    }
  }

  static final public void DihedralRestraint() throws ParseException, ParserDoneException {
    String atom_id1, atom_id2, atom_id3, atom_id4;
    String n1, n2, n3=null, n4=null, n5=null, n6=null, n7=null;
    String angle_low, angle_high;

    int[] coor = Utils.storeBeginOfRestraint();
    lastAssiLine    = coor[0];
    lastAssiCol     = coor[1];
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ATOM_ID:
        atom_id1 = AtomId();
        atom_id2 = AtomId();
        atom_id3 = AtomId();
        atom_id4 = AtomId();
        n1 = Number();
        n2 = Number();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUMBER:
          n3 = Number();
          n4 = Number();
          n5 = Number();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NUMBER:
            n6 = Number();
            n7 = Number();
            break;
          default:
            jj_la1[6] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[7] = jj_gen;
          ;
        }
            /** Cover the following examples. There have been cases where the
                number of "Numbers" is 9, 11, and 13 and those cases were
                disqualified as input.

            #Example I
            1:CYS_4:C          1:ILE_5:N          1:ILE_5:CA         1:ILE_5:C          -175.000 -75.000
            #Example II
            1:CYS_4:C          1:ILE_5:N          1:ILE_5:CA         1:ILE_5:C          -175.000 -75.000 40.00 40.00 1000.000
            #Example III
            1:GLA_3:C          1:GLA_4:N          1:GLA_4:CA         1:GLA_4:C           5.85  1.00 60.00 60.00 1000.000 -170.0  -70.0
            */

            if ( n3 == null ) { /** OK, so they're the same... */
                angle_low       = n1;
                angle_high      = n2;
            } else if ( n6 == null ) {
                angle_low       = n1;
                angle_high      = n2;
            } else {
                angle_low       = n6;
                angle_high      = n7;
            }
            Utils.saveDihedral( stack,
                atom_id1, atom_id2, atom_id3, atom_id4, angle_low, angle_high );
        break;
      default:
        jj_la1[8] = jj_gen;
        error_skipto(ATOM_ID);
      }
    } catch (ParseException e) {
        //General.showDebug("ParseException caught by deep in: DihedralRestraint");
        error_skipto(ATOM_ID);
    }
  }

  static final public String Number() throws ParseException {
    Token t;
    t = jj_consume_token(NUMBER);
        Utils.saveComment(t,cmtStack);
        {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  static final public String AtomId() throws ParseException {
    Token t;
    t = jj_consume_token(ATOM_ID);
        Utils.saveComment(t,cmtStack);
        {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  static final public String Plus() throws ParseException {
    Token t;
    t = jj_consume_token(PLUS);
        Utils.saveComment(t,cmtStack);
        {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  static void error_skipto(int kind) throws ParseException, ParserDoneException {
    Utils.error_skipto(kind, errLineStack, lastAssiLine, lastAssiCol);
  }

  static private boolean jj_initialized_once = false;
  static public DiscoverParserAllTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  static public Token token, jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[9];
  static private int[] jj_la1_0;
  static {
      jj_la1_0();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x200000,0x100000,0x100000,0x100000,0x100000,0x80000,0x100000,0x100000,0x80000,};
   }

  public DiscoverParserAll(java.io.InputStream stream) {
    if (jj_initialized_once) {
      General.showError("Second call to constructor of static parser.  You must");
      General.showOutput("       either use ReInit() or set the JavaCC option STATIC to false");
      General.showOutput("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new DiscoverParserAllTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  static public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  public DiscoverParserAll(java.io.Reader stream) {
    if (jj_initialized_once) {
      General.showError("Second call to constructor of static parser.  You must");
      General.showOutput("       either use ReInit() or set the JavaCC option STATIC to false");
      General.showOutput("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new DiscoverParserAllTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  public DiscoverParserAll(DiscoverParserAllTokenManager tm) {
    if (jj_initialized_once) {
      General.showError("Second call to constructor of static parser.  You must");
      General.showOutput("       either use ReInit() or set the JavaCC option STATIC to false");
      General.showOutput("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  public void ReInit(DiscoverParserAllTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  static final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.Vector jj_expentries = new java.util.Vector();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  static public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[26];
    for (int i = 0; i < 26; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 9; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 26; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static final public void enable_tracing() {
  }

  static final public void disable_tracing() {
  }

}
