/* Generated By:JavaCC: Do not edit this line. XplorParserAll.java */
package Wattos.Converters.Xplor;

import Wattos.Utils.*;
import Wattos.Converters.Xplor.Utils;
import Wattos.Converters.Common.*;

import java.util.jar.Attributes;
import java.util.*;
import java.io.*;

/**
 * @author  Jurgen Doreleijers
 * @version 0.1
 */

public class XplorParserAll implements XplorParserAllConstants {

    // Type of data to parse
    static int data_type = Varia.DATA_TYPE_DISTANCE;

    //parser stack to store ASSI statement
    static Vector stack;
    //Store all comments
    static Vector cmtStack;
    //Store all error lines for second pass
    static Vector errLineStack;
    //Store all errors from second pass
    static Vector errStack;

    //Store most recently parsed Assi line and col 
    //used by error recording later, for second pass
    //scanning for errors
    static int lastAssiLine;
    static int lastAssiCol;

    /**Constructor
     */
    public XplorParserAll() {
        init();
    }

    public void init() {
        stack           = new Vector();
        cmtStack        = new Vector();
        errLineStack    = new Vector();
        errStack        = new Vector();
    }

    /**Start parsing of Xplor file 
     */
    public void parse(String XplorName, int type) {
        String inputFile = XplorName;
        data_type = type;
        try{
            /* Check first if file ends with an end of line, if not, 
                append an extra "\n" before EOF as this would cause problems later on
                */
            RandomAccessFile inputRead = new RandomAccessFile(inputFile, "r");
            long inputBytes = inputRead.length() - 1;
            //forward file pointer to last byte char in file
            inputRead.seek(inputBytes);
            char lastChar = (char)(inputRead.read());
            if (lastChar != '\n' && lastChar != '\r') {  // todo make system independent
                inputRead.close();
                // Open an appending writer
                PrintWriter input = new PrintWriter(new BufferedWriter(new FileWriter(XplorName, true)));
                input.print('\n');
                input.close();
            }
            else
                inputRead.close();

            ReInit( new java.io.FileInputStream(XplorName) );
            getInput();

            //second pass processing errors
            Utils.saveErrors(inputFile, errLineStack, errStack);
        }
        catch (FileNotFoundException e) {
            System.out.println("FileNotFoundException opening " + XplorName );
            General.showThrowable(e);
        }
        catch (ParseException e) {
            System.out.println("ParseException parsing " + XplorName );
            General.showThrowable(e);
        }
        catch (IOException e) {
            System.out.println("IOException in parse method" );
            General.showThrowable(e);
        }
    }


    void getInput() throws ParseException {
        switch ( data_type ) {
            case Varia.DATA_TYPE_DISTANCE:
                getInputDistance();
                break;
            case Varia.DATA_TYPE_DIHEDRAL:
                getInputDihedral();
                break;
            case Varia.DATA_TYPE_DIPOLAR_COUPLING:
                getInputDipolarCoupling();
                break;
            case Varia.DATA_TYPE_CHEMICAL_SHIFT:
                System.out.println("WARNING: Not implemented yet: DATA_TYPE_CHEMICAL_SHIFT");
                break;
            case Varia.DATA_TYPE_COUPLING_CONSTANT:
                System.out.println("WARNING: Not implemented yet: DATA_TYPE_COUPLING_CONSTANT");
                break;
            case Varia.DATA_TYPE_PLANARITY:
                System.out.println("WARNING: Not implemented yet: DATA_TYPE_PLANARITY");
                break;
        }
    }

    /**return Vector storing all data
     * every element is a LogicalNode object
     */
    public Vector popResult() {
        return stack;
    }


    /**return Vector storing all comments
     * every element is a Comment object
     */
    public Vector popComment() {
        return cmtStack;
    }


    /**return Vector storing all errors
     * every element is an ErrorLine object
     */
    public Vector popError() {
        return errStack;
    }

  static final public void getInputDihedral() throws ParseException {
    try {
      AssiListDihedral();

    } catch (ParserDoneException e) {
        if (getNextToken().kind == EOF) {
            ;
        } else {
            System.out.println("Caught ParserDone");
        }
    }
  }

  static final public void getInputDistance() throws ParseException {
    try {
      AssiListDistance();

    } catch (ParserDoneException e) {
        if (getNextToken().kind == EOF) {
            ;
        } else {
            System.out.println("Caught ParserDone");
        }
    }
  }

  static final public void getInputDipolarCoupling() throws ParseException {
    try {
      AssiListDipolarCoupling();

    } catch (ParserDoneException e) {
        if (getNextToken().kind == EOF) {
            ;
        } else {
            System.out.println("Caught ParserDone");
        }
    }
  }

  static final public void AssiListDistance() throws ParseException, ParserDoneException {
    AssiStateDistance();
    AssiListDistance();

  }

  static final public void AssiListDihedral() throws ParseException, ParserDoneException {
    AssiStateDihedral();
    AssiListDihedral();

  }

  static final public void AssiListDipolarCoupling() throws ParseException, ParserDoneException {
    AssiStateDipolarCoupling();
    AssiListDipolarCoupling();

  }

  static final public void AssiStateDistance() throws ParseException, ParserDoneException {
    Token t;
    String d, dminus, dplus;
    ArrayList select1, select2;
    Attributes opt_info =null;
    ArrayList select_list = null;
    Token assiStart = getToken(1);
    lastAssiLine = assiStart.beginLine;
    lastAssiCol = assiStart.beginColumn;
    assiStart = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSI:
        t = jj_consume_token(ASSI);
        select1 = Selection();
        select2 = Selection();
        d = Number();
        dminus = Number();
        dplus = Number();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PEAK:
        case VOLUME:
        case WEIGHT:
        case SPECTRUM:
        case HPM1:
        case HPM2:
        case PPM1:
        case PPM2:
        case CV:
          opt_info = OptionalInfoDistanceList();
          break;
        default:
          jj_la1[0] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OR:
          select_list = SelectListORDistance();
          break;
        default:
          jj_la1[1] = jj_gen;
          ;
        }
                Utils.saveComment(t,cmtStack);
                //System.out.println("Found arraylist for AssiStateDistance:" + AtomNode.toString( select1 ) );
                Utils.saveAssiStateDistance( stack, select1, select2, d, dminus, dplus, opt_info, select_list );
        break;
      default:
        jj_la1[2] = jj_gen;
        error_skipto(ASSI);
      }
    } catch (ParseException e) {
        error_skipto(ASSI);
    }
  }

  static final public void AssiStateDihedral() throws ParseException, ParserDoneException {
    Token t;
    String constant, target, range, exponent;
    ArrayList select1, select2, select3, select4;
    Token assiStart = getToken(1);
    lastAssiLine = assiStart.beginLine;
    lastAssiCol = assiStart.beginColumn;
    assiStart = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSI:
        t = jj_consume_token(ASSI);
        select1 = Selection();
        select2 = Selection();
        select3 = Selection();
        select4 = Selection();
        constant = Number();
        target = Number();
        range = Number();
        exponent = Number();
                Utils.saveComment(t,cmtStack);
                Utils.saveAssiStateDihedral( stack, select1, select2, select3, select4, constant, target, range, exponent );
        break;
      default:
        jj_la1[3] = jj_gen;
        error_skipto(ASSI);
      }
    } catch (ParseException e) {
        error_skipto(ASSI);
    }
  }

  static final public void AssiStateDipolarCoupling() throws ParseException, ParserDoneException {
    Token t;
    String number1 = null;
    String number2 = null;
    String number3 = null;
    ArrayList dummy, select1, select2, select3=null, select4=null;
    Token assiStart = getToken(1);
    lastAssiLine = assiStart.beginLine;
    lastAssiCol = assiStart.beginColumn;
    assiStart = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSI:
        t = jj_consume_token(ASSI);
        dummy = Selection();
        dummy = Selection();
        select1 = Selection();
        select2 = Selection();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
          select3 = Selection();
          select4 = Selection();
          break;
        default:
          jj_la1[4] = jj_gen;
          ;
        }
        number1 = Number();
        number2 = Number();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUMBER:
        case XPLOR_SYMBOL:
          number3 = Number();
          break;
        default:
          jj_la1[5] = jj_gen;
          ;
        }
                Utils.saveComment(t,cmtStack);

                /** Ignore atoms defining the axes, sometimes 2 usually 4*/
                if ( select3 != null ) {
                    Utils.saveAssiStateDipolarCoupling( stack, select3, select4, number1, number2, number3 );
                } else {
                    Utils.saveAssiStateDipolarCoupling( stack, select1, select2, number1, number2, number3 );
                }
        break;
      default:
        jj_la1[6] = jj_gen;
        error_skipto(ASSI);
      }
    } catch (ParseException e) {
        error_skipto(ASSI);
    }
  }

  static final public Attributes OptionalInfoDistanceList() throws ParseException {
    Attributes sel;
    Attributes sel_new = new Attributes();
    sel = OptionalInfoDistanceState();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PEAK:
    case VOLUME:
    case WEIGHT:
    case SPECTRUM:
    case HPM1:
    case HPM2:
    case PPM1:
    case PPM2:
    case CV:
      sel_new = OptionalInfoDistanceList();
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
        General.appendAttributes(sel, sel_new);
        {if (true) return sel;}
    throw new Error("Missing return statement in function");
  }

  static final public Attributes OptionalInfoDistanceState() throws ParseException {
    Attributes sel;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SPECTRUM:
      sel = Spectrum();
                          {if (true) return sel;}
      break;
    case WEIGHT:
      sel = Weight();
                          {if (true) return sel;}
      break;
    case PEAK:
      sel = Peak();
                          {if (true) return sel;}
      break;
    case VOLUME:
      sel = Volume();
                          {if (true) return sel;}
      break;
    case PPM1:
      sel = Ppm1();
                          {if (true) return sel;}
      break;
    case PPM2:
      sel = Ppm2();
                          {if (true) return sel;}
      break;
    case HPM1:
      sel = Hpm1();
                          {if (true) return sel;}
      break;
    case HPM2:
      sel = Hpm2();
                          {if (true) return sel;}
      break;
    case CV:
      sel = Cv();
                          {if (true) return sel;}
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Attributes Spectrum() throws ParseException {
    Token t1,t2=null;
    String value;
    Attributes sel = new Attributes();;
    t1 = jj_consume_token(SPECTRUM);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUAL:
      t2 = jj_consume_token(EQUAL);
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    value = Number();
        Utils.saveComment(t1, cmtStack);
        Utils.saveComment(t2, cmtStack);
        sel.putValue("spectrum", value);
        {if (true) return sel;}
    throw new Error("Missing return statement in function");
  }

  static final public Attributes Weight() throws ParseException {
    Token t1,t2=null;
    String value;
    Attributes sel = new Attributes();;
    t1 = jj_consume_token(WEIGHT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUAL:
      t2 = jj_consume_token(EQUAL);
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    value = Number();
        Utils.saveComment(t1, cmtStack);
        Utils.saveComment(t2, cmtStack);
        sel.putValue("weight", value);
        {if (true) return sel;}
    throw new Error("Missing return statement in function");
  }

  static final public Attributes Peak() throws ParseException {
    Token t1,t2=null;
    String value;
    Attributes sel = new Attributes();;
    t1 = jj_consume_token(PEAK);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUAL:
      t2 = jj_consume_token(EQUAL);
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    value = Number();
        Utils.saveComment(t1, cmtStack);
        Utils.saveComment(t2, cmtStack);
        sel.putValue("peak", value);
        {if (true) return sel;}
    throw new Error("Missing return statement in function");
  }

  static final public Attributes Volume() throws ParseException {
    Token t1,t2=null;
    String value;
    Attributes sel = new Attributes();;
    t1 = jj_consume_token(VOLUME);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUAL:
      t2 = jj_consume_token(EQUAL);
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    value = Number();
        Utils.saveComment(t1, cmtStack);
        Utils.saveComment(t2, cmtStack);
        sel.putValue("volume", value);
        {if (true) return sel;}
    throw new Error("Missing return statement in function");
  }

  static final public Attributes Ppm1() throws ParseException {
    Token t1,t2=null;
    String value;
    Attributes sel = new Attributes();;
    t1 = jj_consume_token(PPM1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUAL:
      t2 = jj_consume_token(EQUAL);
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
    value = Number();
        Utils.saveComment(t1, cmtStack);
        Utils.saveComment(t2, cmtStack);
        sel.putValue("ppm1", value);
        {if (true) return sel;}
    throw new Error("Missing return statement in function");
  }

  static final public Attributes Ppm2() throws ParseException {
    Token t1,t2=null;
    String value;
    Attributes sel = new Attributes();;
    t1 = jj_consume_token(PPM2);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUAL:
      t2 = jj_consume_token(EQUAL);
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
    value = Number();
        Utils.saveComment(t1, cmtStack);
        Utils.saveComment(t2, cmtStack);
        sel.putValue("ppm2", value);
        {if (true) return sel;}
    throw new Error("Missing return statement in function");
  }

  static final public Attributes Hpm1() throws ParseException {
    Token t1,t2=null;
    String value;
    Attributes sel = new Attributes();;
    t1 = jj_consume_token(HPM1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUAL:
      t2 = jj_consume_token(EQUAL);
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    value = Number();
        Utils.saveComment(t1, cmtStack);
        Utils.saveComment(t2, cmtStack);
        sel.putValue("hpm1", value);
        {if (true) return sel;}
    throw new Error("Missing return statement in function");
  }

  static final public Attributes Hpm2() throws ParseException {
    Token t1,t2=null;
    String value;
    Attributes sel = new Attributes();;
    t1 = jj_consume_token(HPM2);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUAL:
      t2 = jj_consume_token(EQUAL);
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    value = Number();
        Utils.saveComment(t1, cmtStack);
        Utils.saveComment(t2, cmtStack);
        sel.putValue("hpm2", value);
        {if (true) return sel;}
    throw new Error("Missing return statement in function");
  }

/** Will not be stored. CV stands for cross-validation the
number indicates to which partition number the restraint belongs. */
  static final public Attributes Cv() throws ParseException {
    Token t1,t2=null;
    String value;
    Attributes sel = new Attributes();;
    t1 = jj_consume_token(CV);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUAL:
      t2 = jj_consume_token(EQUAL);
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
    value = Number();
        Utils.saveComment(t1, cmtStack);
        Utils.saveComment(t2, cmtStack);
        {if (true) return sel;}
    throw new Error("Missing return statement in function");
  }

  static final public ArrayList SelectListORDistance() throws ParseException, ParserDoneException {
    ArrayList select_list;
    ArrayList select_list_new = null;
    select_list = SelectStateORDistance();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OR:
      select_list_new = SelectListORDistance();
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
        if ( select_list_new != null ) {
            select_list.addAll(select_list_new);
        }
        {if (true) return select_list;}
    throw new Error("Missing return statement in function");
  }

  static final public ArrayList SelectStateORDistance() throws ParseException, ParserDoneException {
    Token t;
    ArrayList select1, select2;
    ArrayList select_both = new ArrayList();
    t = jj_consume_token(OR);
    select1 = Selection();
    select2 = Selection();
        Utils.saveComment(t,cmtStack);
        select_both.add( select1 );
        select_both.add( select2 );
        {if (true) return select_both;}
    throw new Error("Missing return statement in function");
  }

/** "Selection" using Xplor syntax */
  static final public ArrayList Selection() throws ParseException {
    Token t1, t2;
    ArrayList sel;
    t1 = jj_consume_token(LPAREN);
    sel = SelExpr();
    t2 = jj_consume_token(RPAREN);
        Utils.saveComment(t1, cmtStack);
        Utils.saveComment(t2, cmtStack);
        //System.out.println("Found arraylist for Selection:" + AtomNode.toString( sel ) );
        if ( sel == null ) {
            sel = new ArrayList();
        }
        {if (true) return sel;}
    throw new Error("Missing return statement in function");
  }

/** "SelectionExpression" using Xplor syntax */
  static final public ArrayList SelExpr() throws ParseException {
    ArrayList sel, sel_tail;
    sel = Term();
    sel_tail = SelExprTail();
        if ( sel_tail != null ) {
            sel = AtomNode.combineAtomList( Varia.OPERATION_TYPE_OR, sel, sel_tail );
        }
        //System.out.println("Found arraylist for SelExpr:" + AtomNode.toString( sel ) );
        {if (true) return sel;}
    throw new Error("Missing return statement in function");
  }

  static final public ArrayList SelExprTail() throws ParseException {
    Token   t;
    ArrayList sel=null, sel_tail;
    try {
      t = jj_consume_token(OR);
      sel = Term();
      sel_tail = SelExprTail();
            Utils.saveComment(t, cmtStack);
            if ( sel_tail != null ) {
                sel = AtomNode.combineAtomList( Varia.OPERATION_TYPE_OR, sel, sel_tail );
            }
            //System.out.println("Found arraylist for SelExprTail:" + AtomNode.toString( sel ) );
            {if (true) return sel;}
    } catch (ParseException e) {
        {if (true) return sel;}
    }
    throw new Error("Missing return statement in function");
  }

/** "Term" using Xplor syntax */
  static final public ArrayList Term() throws ParseException {
    ArrayList sel, sel_tail;
    sel = Factor();
    sel_tail = TermTail();
        if ( sel_tail != null ) {
            sel = AtomNode.combineAtomList( Varia.OPERATION_TYPE_AND, sel, sel_tail );
        }
        //System.out.println("Found arraylist for Term:" + AtomNode.toString( sel ) );
        {if (true) return sel;}
    throw new Error("Missing return statement in function");
  }

  static final public ArrayList TermTail() throws ParseException {
    Token   t;
    ArrayList sel=null, sel_tail;
    try {
      t = jj_consume_token(AND);
      sel = Factor();
      sel_tail = TermTail();
            Utils.saveComment(t, cmtStack);
            if ( sel_tail != null ) {
                sel = AtomNode.combineAtomList( Varia.OPERATION_TYPE_AND, sel, sel_tail );
            }
            //System.out.println("Found arraylist for TermTail:" + AtomNode.toString( sel ) );
            {if (true) return sel;}
    } catch (ParseException e) {
        ArrayList bogus = new ArrayList();
        //System.out.println("Found arraylist for TermTail:" + AtomNode.toString( bogus ) );
        {if (true) return sel;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public ArrayList Factor() throws ParseException {
    ArrayList sel = new ArrayList();
    AtomNode atomnode;
    Token   t1;
    Token   t2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      t1 = jj_consume_token(LPAREN);
      sel = SelExpr();
      t2 = jj_consume_token(RPAREN);
        Utils.saveComment(t1, cmtStack);
        Utils.saveComment(t2, cmtStack);
        {if (true) return sel;}
      break;
    case SEGI:
      atomnode = SegiSelection();
        sel.add( atomnode );
        //System.out.println("Found arraylist for factor:" + AtomNode.toString( sel ) );
        {if (true) return sel;}
      break;
    case RESI:
      atomnode = ResiSelection();
        sel.add( atomnode );
        //System..out.println("Found arraylist for factor:" + AtomNode.toString( sel ) );
        {if (true) return sel;}
      break;
    case RESN:
      atomnode = ResnSelection();
        sel.add( atomnode );
        //System.out.println("Found arraylist for factor:" + AtomNode.toString( sel ) );
        {if (true) return sel;}
      break;
    case NAME:
      atomnode = NameSelection();
        sel.add( atomnode );
        //System.out.println("Found arraylist for factor:" + AtomNode.toString( sel ) );
        {if (true) return sel;}
      break;
    case ATOM:
      atomnode = AtomSelection();
        sel.add( atomnode );
        //System.out.println("Found arraylist for factor:" + AtomNode.toString( sel ) );
        {if (true) return sel;}
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public AtomNode SegiSelection() throws ParseException {
    String name;
    Token   t1,t2=null;
    t1 = jj_consume_token(SEGI);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUAL:
      t2 = jj_consume_token(EQUAL);
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
    name = Name();
        AtomNode atomnode = new AtomNode();
        atomnode.info.putValue("segi", name);
        Utils.saveComment(t1, cmtStack);
        Utils.saveComment(t2, cmtStack);
        {if (true) return atomnode;}
    throw new Error("Missing return statement in function");
  }

  static final public AtomNode ResiSelection() throws ParseException {
    String name;
    Token   t1,t2=null;
    t1 = jj_consume_token(RESI);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUAL:
      t2 = jj_consume_token(EQUAL);
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
    name = Name();
        AtomNode atomnode = new AtomNode();
        atomnode.info.putValue("resi", name);
        Utils.saveComment(t1, cmtStack);
        Utils.saveComment(t2, cmtStack);
        {if (true) return atomnode;}
    throw new Error("Missing return statement in function");
  }

  static final public AtomNode ResnSelection() throws ParseException {
    String name;
    Token   t1,t2=null;
    t1 = jj_consume_token(RESN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUAL:
      t2 = jj_consume_token(EQUAL);
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
    name = Name();
        AtomNode atomnode = new AtomNode();
        atomnode.info.putValue("resn", name);
        Utils.saveComment(t1, cmtStack);
        Utils.saveComment(t2, cmtStack);
        {if (true) return atomnode;}
    throw new Error("Missing return statement in function");
  }

  static final public AtomNode NameSelection() throws ParseException {
    String name;
    Token   t1,t2=null;
    t1 = jj_consume_token(NAME);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUAL:
      t2 = jj_consume_token(EQUAL);
      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }
    name = Name();
        AtomNode atomnode = new AtomNode();
        atomnode.info.putValue("name", name);
        Utils.saveComment(t1, cmtStack);
        Utils.saveComment(t2, cmtStack);
        //System.out.println("Found atomnode for nameselection:" + atomnode );
        {if (true) return atomnode;}
    throw new Error("Missing return statement in function");
  }

  static final public AtomNode AtomSelection() throws ParseException {
    String name_segi;
    String name_resi;
    String name_name;
    Token   t1,t2=null;
    t1 = jj_consume_token(ATOM);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUAL:
      t2 = jj_consume_token(EQUAL);
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
    name_segi = Name();
    name_resi = Name();
    name_name = Name();
        AtomNode atomnode = new AtomNode();
        atomnode.info.putValue("segi", name_segi);
        atomnode.info.putValue("resi", name_resi);
        atomnode.info.putValue("name", name_name);
        Utils.saveComment(t1, cmtStack);
        Utils.saveComment(t2, cmtStack);
        {if (true) return atomnode;}
    throw new Error("Missing return statement in function");
  }

  static final public String Name() throws ParseException {
    String n;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      n = Identifier();
                         {if (true) return n;}
      break;
    case NUMBER:
    case XPLOR_SYMBOL:
      n = Number();
                     {if (true) return n;}
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String Number() throws ParseException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
      t = jj_consume_token(NUMBER);
        Utils.saveComment(t,cmtStack);
        {if (true) return t.image;}
      break;
    case XPLOR_SYMBOL:
      t = jj_consume_token(XPLOR_SYMBOL);
        Utils.saveComment(t,cmtStack);
        {if (true) return t.image;}
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String Identifier() throws ParseException {
    Token t;
    t = jj_consume_token(IDENTIFIER);
        Utils.saveComment(t,cmtStack);
        int length = t.image.length();
        if ( length < 2 ) {
            {if (true) return t.image;}
        }
        // Check if quotes are at the beginning and end of the image
        // This will ignore double quotes in the middle.
        if ( t.image.endsWith(  "\"") &&
             t.image.startsWith("\"") ) {
            //get rid of quotes
            {if (true) return t.image.substring(1,length-1);}
        }
        {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  static void error_skipto(int kind) throws ParseException, ParserDoneException {
    Utils.error_skipto(kind, errLineStack, cmtStack, lastAssiLine, lastAssiCol);
  }

  static private boolean jj_initialized_once = false;
  static public XplorParserAllTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  static public Token token, jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[27];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x4000000,0x4000000,0x0,0x0,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf8000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x7fc,0x2,0x0,0x0,0x800,0xc000,0x0,0x7fc,0x7fc,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2,0x800,0x2000,0x2000,0x2000,0x2000,0x2000,0x1c000,0xc000,};
   }

  public XplorParserAll(java.io.InputStream stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new XplorParserAllTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
  }

  static public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
  }

  public XplorParserAll(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new XplorParserAllTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
  }

  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
  }

  public XplorParserAll(XplorParserAllTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
  }

  public void ReInit(XplorParserAllTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
  }

  static final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.Vector jj_expentries = new java.util.Vector();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  static public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[59];
    for (int i = 0; i < 59; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 27; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 59; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static final public void enable_tracing() {
  }

  static final public void disable_tracing() {
  }

}
