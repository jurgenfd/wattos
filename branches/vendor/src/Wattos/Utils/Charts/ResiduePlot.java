/*
 * ResiduePlot.java
 *
 * Created on March 16, 2006, 3:23 PM
 */

package Wattos.Utils.Charts;

import Wattos.Database.*;
import Wattos.Utils.*;
import java.awt.*;
import org.jfree.chart.*;
import org.jfree.chart.axis.*;
import org.jfree.chart.labels.*;
import org.jfree.chart.plot.*;
import org.jfree.chart.renderer.xy.*;
import org.jfree.data.xy.*;
import org.jfree.ui.*;

/**
 *
 * @author  jurgen
 */
public class ResiduePlot extends javax.swing.JFrame {
    
    private static final long serialVersionUID = -2017904891962566197L;
    public static Color[] SERIES_COLOR_LIST = new Color[] {
        Color.BLACK,Color.RED,Color.BLUE,Color.GREEN,Color.CYAN,Color.ORANGE,Color.MAGENTA};

    /**
     * Creates new form ResiduePlot
     */
    public ResiduePlot() {
        initComponents();
    }

    
    /**
     * Creates new form ResiduePlot
     */
    public ResiduePlot(DefaultTableXYDataset dataset) {
        initComponents();
        
        final JFreeChart chart = createChart(dataset,null,null,null,null);
        final ChartPanel chartPanel = new ChartPanel(chart);
        //chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
        setContentPane(chartPanel);        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jPanel1 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 512, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 347, Short.MAX_VALUE)
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents
        
    /**
     * Creates a sample dataset.
     * 
     * @return a sample dataset.
     */
    public static DefaultTableXYDataset createDatasetFromRelation(Relation r, 
            StringArrayList columnNameListValue,
            StringArrayList seriesNameList
            ) {
        
        DefaultTableXYDataset dataset = new DefaultTableXYDataset();
        double v = 0d;
        for (int i=0;i<columnNameListValue.size();i++) {
            String columnName = columnNameListValue.getString(i);
            String seriesName = seriesNameList.getString(i);
            Object valueList = r.getColumn(columnName);            
            if (!(( valueList instanceof float[] ) ||
                ( valueList instanceof int[] ) ||
                ( valueList instanceof double[] ) ||
                ( valueList instanceof byte[] ))) {
                General.showError("Failed to createDatasetFromRelation for column: " + columnName);
                return null;                
            }
            XYSeries series = new XYSeries(seriesName,false,false);
            int resPlotId = 0;
            for (int rid=r.used.nextSetBit(0);rid>=0;rid=r.used.nextSetBit(rid+1)) {
                v =  r.getValueDoubleSafe(rid,columnName);
                if ( Defs.isNull(v)) {
                    General.showError("Failed to getValueDoubleSafe for column: " + columnName);
                    return null;
                }
                series.add(resPlotId, v);
                resPlotId++;
            }
            dataset.addSeries(series);
        }                    
        return dataset;        
    }

    
    
    /**
     * Creates a sample datasetidue info will be taken from the relation through the given column
     *names. They need to exist.
     */
    static public JFreeChart createChart(DefaultTableXYDataset dataset,
            Relation r,
            String columnNameMolNumb,
            String columnNameResNumb,
            String columnNameResName
            ) {
        
        // create the chart...
        final JFreeChart chart = ChartFactory.createXYLineChart(
            null,                     // chart title
            null,                     // x axis label
            null,                     // y axis label
            null,                     // data
            PlotOrientation.VERTICAL,
            true,                     // include legend
            true,                     // tooltips
            false                     // urls
        );

        // NOW DO SOME OPTIONAL CUSTOMISATION OF THE CHART...
        chart.setBackgroundPaint(Color.white);
        XYPlot plot = (XYPlot) chart.getPlot();
        
        
        //final XYItemRenderer renderer = (XYItemRenderer) plot.getRenderer();
        //renderer.setPaint(Color.black);
        
        int seriesCount = dataset.getSeriesCount();
        for (int i=0;i<seriesCount;i++) {
            XYSeries series = dataset.getSeries(i);
            String key = (String) series.getKey();

            NumberAxis axis2 = new NumberAxis(key);
            axis2.setLabelPaint(SERIES_COLOR_LIST[i]);
            axis2.setTickLabelPaint(SERIES_COLOR_LIST[i]);
            plot.setRangeAxis(i, axis2);
            
            DefaultTableXYDataset dataset2 = new DefaultTableXYDataset();
            dataset2.addSeries(series);
            plot.setDataset(i, dataset2);
            plot.mapDatasetToRangeAxis(i, i);
            StandardXYItemRenderer renderer2 = new StandardXYItemRenderer(
                    StandardXYItemRenderer.SHAPES_AND_LINES,
                    new StandardXYToolTipGenerator());
            renderer2.setSeriesPaint(0, SERIES_COLOR_LIST[i]);   
            renderer2.setShapesFilled((i%2)==0); // spice it up with some variety.
            renderer2.setItemLabelsVisible(true);
            plot.setRenderer(i, renderer2); 
            final ItemLabelPosition p = new ItemLabelPosition(
                ItemLabelAnchor.OUTSIDE12, TextAnchor.BOTTOM_CENTER, TextAnchor.CENTER, Math.PI / 4
            );
            renderer2.setPositiveItemLabelPosition(p);
            
        }
        
        //final StandardLegend legend = (StandardLegend) chart.getLegend();
        //legend.setDisplaySeriesShapes(true);
        
        // get a reference to the plot for further customisation...
        //final XYPlot plot = chart.getXYPlot();
        plot.setBackgroundPaint(Color.white);
        //plot.setAxisOffset(new Spacer(Spacer.ABSOLUTE, 5.0, 5.0, 5.0, 5.0));
        plot.setDomainGridlinePaint(Color.lightGray);
        plot.setRangeGridlinePaint(Color.lightGray);
        
        plot.setDomainCrosshairLockedOnData(true);
        plot.setDomainCrosshairVisible(true);
        plot.setRangeCrosshairLockedOnData(true);
        plot.setRangeCrosshairVisible(true);
        
        
        // No idea what this is:
//        renderer.setPositiveItemLabelPosition(p);

        // change the auto tick unit selection to integer units only...
//        final NumberAxis rangeAxis = (NumberAxis) plot.getDomainAxis();
//        rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());

        int[]    molNumbList = r.getColumnInt(columnNameMolNumb);
        String[] resNameList = r.getColumnString(columnNameResName);
        int[]    resNumbList = r.getColumnInt(columnNameResNumb);
        
        String[] sv = new String[r.used.cardinality()];
        int rid = 0;
        for (int i=r.used.nextSetBit(0);i>=0;i=r.used.nextSetBit(i+1)) {
            String resName = resNameList[i].substring(0,1).toUpperCase() + 
                             resNameList[i].substring(  1).toLowerCase();
            sv[rid] =  resName + " " + resNumbList[i] + "(" + molNumbList[i] + ")";
            rid++;
        }
        SymbolAxis symbolAxis = new SymbolAxis("Sequence",sv);
        NumberTickUnit numberTickUnit = new NumberTickUnit(5);
        symbolAxis.setTickUnit(numberTickUnit);
        //symbolAxis.setTickUnit();
        // OPTIONAL CUSTOMISATION COMPLETED.
        plot.setDomainAxis(symbolAxis);
        
        return chart;
        
    }    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables

    /**
     */
    public static void run(DefaultTableXYDataset dataset) {
        //final XYDataset this.dataset = dataset;
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new ResiduePlot(dataset).setVisible(true);
//            }
//        });
        ResiduePlot rp = new ResiduePlot(dataset);
        rp.setVisible(true);
    }  
    
    public static void show( JFreeChart chart ) {
        ChartPanel chartPanel = new ChartPanel(chart);
        showPanel( chartPanel );
    }

    public static void showPanel( ChartPanel chartPanel ) {
        final ResiduePlot rp = new ResiduePlot();
        rp.setContentPane(chartPanel);  
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                rp.setVisible(true);
            }
        });
    }

}
