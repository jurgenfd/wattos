/* The following code was generated by JFlex 1.3.5 on 9/14/06 2:14 PM */

/*
 * This software is copyright (c) 2006 Board of Regents, University of
 * Wisconsin. All Rights Reserved.
 *
 * FILE:        $Source$
 *
 * AUTHOR:      $Author$
 * DATE:        $Date$
 *
 * UPDATE HISTORY:
 * ---------------
 * $Log$
 * Revision 1.1  2007/06/19 18:07:54  jurgenfd
 * Initial revision
 *
 * Revision 1.4  2006/10/12 20:43:18  jurgen
 * All setup for work in Eclipse with new build file.
 *
 * Revision 1.3  2006/09/20 16:32:58  jurgen
 * Updated STAR flex lexer and parser to Dimitri's specs for faster parsing of ;; delimited values etc.
 * Changed bug reports to Trac system outside of the Wattos package but nicer.
 * */
//***************************************************************************
// Scanner flex specification
//***************************************************************************
/* Lex Definitions for a STAR File */

package Wattos.Star;

/**
 * STAR Lexer with some error checking.
 *
 * <STRONG>NOTES</STRONG>:<UL>
 *  <LI>this scanner does not close input file on EOF</LI>
 *  <LI>the scanner does not generate fake "end-of" tokens for
 *      end of data block, end of global block, end of loop
 *      (if closing "stop_" is omitted)</LI>
 *  <LI>this scanner generates "keyword in value" warnings (in C++
 *      version they are generated by the parser)</LI>
 * </UL>
 */


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 9/14/06 2:14 PM from the specification file
 * <tt>file:/C:/Wattos/src/Wattos/Star/star.flex</tt>
 */
public class STARLexer {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int YYDOUBLE = 4;
  final public static int YYSEMI = 6;
  final public static int YYINITIAL = 0;
  final public static int YYSEMIEND = 8;
  final public static int YYSINGLE = 2;

  /**
   * YY_LEXSTATE[l] is the state in the DFA for the lexical state l
   * YY_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private final static int YY_LEXSTATE[] = { 
     0,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\10\0\2\1\1\2\25\0\1\1\1\24\1\22\1\27\1\23\1\26"+
    "\1\24\1\21\5\24\2\26\1\24\12\25\1\24\1\30\1\24\1\0"+
    "\1\24\1\0\1\24\1\7\1\6\1\25\1\11\1\15\1\25\1\3"+
    "\4\25\1\4\2\25\1\5\1\16\2\25\1\13\1\12\1\25\1\14"+
    "\4\25\1\20\1\0\1\20\1\0\1\10\1\24\1\7\1\6\1\25"+
    "\1\11\1\15\1\25\1\3\4\25\1\4\2\25\1\5\1\16\2\25"+
    "\1\13\1\12\1\25\1\14\4\25\4\24\53\0\1\17\12\0\1\17"+
    "\4\0\1\17\5\0\27\17\1\0\37\17\1\0\u013f\17\31\0\162\17"+
    "\4\0\14\17\16\0\5\17\11\0\1\17\213\0\1\17\13\0\1\17"+
    "\1\0\3\17\1\0\1\17\1\0\24\17\1\0\54\17\1\0\46\17"+
    "\1\0\5\17\4\0\202\17\10\0\105\17\1\0\46\17\2\0\2\17"+
    "\6\0\20\17\41\0\46\17\2\0\1\17\7\0\47\17\110\0\33\17"+
    "\5\0\3\17\56\0\32\17\5\0\13\17\25\0\12\17\4\0\2\17"+
    "\1\0\143\17\1\0\1\17\17\0\2\17\7\0\17\17\2\0\1\17"+
    "\20\0\1\17\1\0\36\17\35\0\3\17\60\0\46\17\13\0\1\17"+
    "\u0152\0\66\17\3\0\1\17\22\0\1\17\7\0\12\17\4\0\12\17"+
    "\25\0\10\17\2\0\2\17\2\0\26\17\1\0\7\17\1\0\1\17"+
    "\3\0\4\17\3\0\1\17\36\0\2\17\1\0\3\17\4\0\14\17"+
    "\23\0\6\17\4\0\2\17\2\0\26\17\1\0\7\17\1\0\2\17"+
    "\1\0\2\17\1\0\2\17\37\0\4\17\1\0\1\17\7\0\12\17"+
    "\2\0\3\17\20\0\11\17\1\0\3\17\1\0\26\17\1\0\7\17"+
    "\1\0\2\17\1\0\5\17\3\0\1\17\22\0\1\17\17\0\2\17"+
    "\4\0\12\17\25\0\10\17\2\0\2\17\2\0\26\17\1\0\7\17"+
    "\1\0\2\17\1\0\5\17\3\0\1\17\36\0\2\17\1\0\3\17"+
    "\4\0\12\17\1\0\1\17\21\0\1\17\1\0\6\17\3\0\3\17"+
    "\1\0\4\17\3\0\2\17\1\0\1\17\1\0\2\17\3\0\2\17"+
    "\3\0\3\17\3\0\10\17\1\0\3\17\55\0\11\17\25\0\10\17"+
    "\1\0\3\17\1\0\27\17\1\0\12\17\1\0\5\17\46\0\2\17"+
    "\4\0\12\17\25\0\10\17\1\0\3\17\1\0\27\17\1\0\12\17"+
    "\1\0\5\17\3\0\1\17\40\0\1\17\1\0\2\17\4\0\12\17"+
    "\25\0\10\17\1\0\3\17\1\0\27\17\1\0\20\17\46\0\2\17"+
    "\4\0\12\17\25\0\22\17\3\0\30\17\1\0\11\17\1\0\1\17"+
    "\2\0\7\17\72\0\60\17\1\0\2\17\14\0\7\17\11\0\12\17"+
    "\47\0\2\17\1\0\1\17\2\0\2\17\1\0\1\17\2\0\1\17"+
    "\6\0\4\17\1\0\7\17\1\0\3\17\1\0\1\17\1\0\1\17"+
    "\2\0\2\17\1\0\4\17\1\0\2\17\11\0\1\17\2\0\5\17"+
    "\1\0\1\17\11\0\12\17\2\0\2\17\42\0\1\17\37\0\12\17"+
    "\26\0\10\17\1\0\42\17\35\0\4\17\164\0\42\17\1\0\5\17"+
    "\1\0\2\17\25\0\12\17\6\0\6\17\112\0\46\17\12\0\51\17"+
    "\7\0\132\17\5\0\104\17\5\0\122\17\6\0\7\17\1\0\77\17"+
    "\1\0\1\17\1\0\4\17\2\0\7\17\1\0\1\17\1\0\4\17"+
    "\2\0\47\17\1\0\1\17\1\0\4\17\2\0\37\17\1\0\1\17"+
    "\1\0\4\17\2\0\7\17\1\0\1\17\1\0\4\17\2\0\7\17"+
    "\1\0\7\17\1\0\27\17\1\0\37\17\1\0\1\17\1\0\4\17"+
    "\2\0\7\17\1\0\47\17\1\0\23\17\16\0\11\17\56\0\125\17"+
    "\14\0\u026c\17\2\0\10\17\12\0\32\17\5\0\113\17\25\0\15\17"+
    "\1\0\4\17\16\0\22\17\16\0\22\17\16\0\15\17\1\0\3\17"+
    "\17\0\64\17\43\0\1\17\4\0\1\17\3\0\12\17\46\0\12\17"+
    "\6\0\130\17\10\0\51\17\127\0\35\17\51\0\50\17\2\0\5\17"+
    "\u038b\0\154\17\224\0\234\17\4\0\132\17\6\0\26\17\2\0\6\17"+
    "\2\0\46\17\2\0\6\17\2\0\10\17\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\1\0\37\17\2\0\65\17\1\0\7\17\1\0\1\17"+
    "\3\0\3\17\1\0\7\17\3\0\4\17\2\0\6\17\4\0\15\17"+
    "\5\0\3\17\1\0\7\17\164\0\1\17\15\0\1\17\202\0\1\17"+
    "\4\0\1\17\2\0\12\17\1\0\1\17\3\0\5\17\6\0\1\17"+
    "\1\0\1\17\1\0\1\17\1\0\4\17\1\0\3\17\1\0\7\17"+
    "\3\0\3\17\5\0\5\17\u0ebb\0\2\17\52\0\5\17\5\0\2\17"+
    "\4\0\126\17\6\0\3\17\1\0\132\17\1\0\4\17\5\0\50\17"+
    "\4\0\136\17\21\0\30\17\70\0\20\17\u0200\0\u19b6\17\112\0\u51a6\17"+
    "\132\0\u048d\17\u0773\0\u2ba4\17\u215c\0\u012e\17\2\0\73\17\225\0\7\17"+
    "\14\0\5\17\5\0\1\17\1\0\12\17\1\0\15\17\1\0\5\17"+
    "\1\0\1\17\1\0\2\17\1\0\2\17\1\0\154\17\41\0\u016b\17"+
    "\22\0\100\17\2\0\66\17\50\0\14\17\164\0\5\17\1\0\207\17"+
    "\23\0\12\17\7\0\32\17\6\0\32\17\13\0\131\17\3\0\6\17"+
    "\2\0\6\17\2\0\6\17\2\0\3\17\43\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    25,    50,    75,   100,   125,   150,   175,   200,   225, 
      250,   275,   300,   325,   350,   375,   400,   400,   425,   450, 
      475,   400,   400,   400,   500,   400,   400,   525,   550,   575, 
      600,   625,   650,   325,   425,   450,   500,   675,   700,   575, 
      725,   750,   775,   800,   825,   850,   875,   900,   925,   950, 
      975,  1000,  1025,  1050,  1075,   975,  1100,  1125,  1150,  1175, 
     1200
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\7\2\10\1\11\1\12\3\7\1\13\1\14\1\7"+
    "\1\15\7\7\1\16\3\7\1\17\2\7\2\10\1\11"+
    "\1\12\3\7\1\13\1\14\1\7\1\15\7\7\1\16"+
    "\3\7\1\17\1\20\2\21\1\22\16\21\1\23\11\21"+
    "\1\22\17\21\1\24\6\21\2\25\1\26\26\25\2\27"+
    "\1\30\25\27\1\31\1\7\2\0\26\7\1\0\2\10"+
    "\16\0\1\32\1\33\6\0\1\7\2\0\1\7\1\34"+
    "\25\7\2\0\2\7\1\35\24\7\2\0\15\36\5\7"+
    "\1\36\4\7\2\0\4\7\1\37\22\7\2\0\4\7"+
    "\1\40\2\7\1\41\17\7\2\0\14\42\2\7\10\42"+
    "\2\17\1\0\26\17\2\20\1\0\26\20\32\0\2\43"+
    "\27\0\2\44\26\0\2\25\1\0\26\25\1\0\2\45"+
    "\26\0\1\7\2\0\2\7\1\46\24\7\2\0\2\7"+
    "\1\47\24\7\2\0\16\50\4\7\2\50\3\7\2\0"+
    "\7\7\1\51\17\7\2\0\11\7\1\52\15\7\2\0"+
    "\2\7\1\53\24\7\2\0\3\7\1\54\23\7\2\0"+
    "\13\7\1\55\13\7\2\0\4\7\1\56\22\7\2\0"+
    "\12\7\1\57\14\7\2\0\13\7\1\60\13\7\2\0"+
    "\4\7\1\61\22\7\2\0\5\7\1\62\21\7\2\0"+
    "\5\7\1\63\21\7\2\0\5\7\1\64\21\7\2\0"+
    "\5\7\1\65\21\7\2\0\1\7\1\66\25\7\2\67"+
    "\26\7\1\70\2\0\26\70\1\71\2\72\26\71\1\7"+
    "\2\73\27\7\2\0\5\7\1\74\20\7\1\0\2\67"+
    "\26\0\1\71\2\0\26\71\1\0\2\72\27\0\2\73"+
    "\26\0\1\7\2\75\26\7\1\0\2\75\26\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     9,  9,  3,  3,  1,  9,  9,  9,  1,  9,  9,  1,  1,  1,  1,  1, 
     1,  1,  5,  5,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /* user code: */
    public static final int ERROR = 0;
            /** Parser warning. */
    public static final int WARNING = 1;
            /** Start of global block. */
    public static final int GLOBALSTART = 2;
            /** End of global block. */
    public static final int GLOBALEND = 3;
            /** Start of data block. */
    public static final int DATASTART = 4;
            /** End of data block. */
    public static final int DATAEND = 5;
            /** Start of saveframe. */
    public static final int SAVESTART = 6;
            /** End of saveframe. */
    public static final int SAVEEND = 7;
            /** Start of loop. */
    public static final int LOOPSTART = 8;
            /** End of loop. */
    public static final int STOP = 9;   
            /** Tag. */
    public static final int TAGNAME = 10;
            /** Value enclosed in single quotes. */
    public static final int DVNSINGLE = 11;
            /** Value enclosed in double quotes. */
    public static final int DVNDOUBLE = 12;
            /** Value enclosed in semicolons. */
    public static final int DVNSEMICOLON = 13;
            /** Framecode value. */
    public static final int DVNFRAMECODE = 14;
            /** Bareword value. */
    public static final int DVNNON = 15;
            /** Comment. */
    public static final int COMMENT = 16;
            /** End of input. */
    public static final int EOF = 17;


    /** token names. Use int token constant as array index */
    public static final String [] TOKEN_TYPES = {
    "ERROR",
    "WARNING",
    "GLOBALSTART",
    "GLOBALEND",
    "DATASTART",
    "DATAEND",
    "SAVESTART",
    "SAVEEND",
    "LOOPSTART",
    "STOP",
    "TAGNAME",
    "DVNSINGLE",
    "DVNDOUBLE",
    "DVNSEMICOLON",
    "DVNFRAMECODE",
    "DVNNON",
    "COMMENT",
    "EOF"
};

    /* buffer for quoted values */
    private StringBuilder buf;
    /** Returns line number (counting from 1).
     * Returns <CODE>yyline + 1</CODE>
     * @return line number
     */
    public int getLine() {
        return yyline + 1;
    }
    /** Returns column number.
     * @return column number
     */
    public int getColumn() {
        return yycolumn;
    }
    /** Returns text of the last token.
     * <P>
     * Use this method instead of <CODE>yytext()</CODE> to retrieve tokens.
     *<P>
     * Because quoted values (DVNSINGLE, DVNDOUBLE, DVNSEMICOLON) are parsed
     * differently from non-quoted ones (DVNNON and DVNFRAMECODE), their
     * text is stored in a separate buffer.
     * <P>
     * For other token types returns <CODE>yytext()</CODE>.
     */
    public String getText() {
        if( buf.length() < 1 ) return yytext();
	return buf.toString();
    }
    /** Pushes number of characters back into input stream.
     * @param num number of characters to push back
     */
    public void pushBack( int num ) {
        yypushback( num );
    }
//******************************************************************************


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public STARLexer(java.io.Reader in) {
      buf = new StringBuilder();
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public STARLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[1225];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1294) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;
    int yy_pushbackPos_l = yy_pushbackPos = -1;
    boolean yy_was_pushback;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      if (yy_markedPos_l > yy_startRead) {
        switch (yy_buffer_l[yy_markedPos_l-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yy_atBOL = true;
          break;
        case '\r': 
          if (yy_markedPos_l < yy_endRead_l)
            yy_atBOL = yy_buffer_l[yy_markedPos_l] != '\n';
          else if (yy_atEOF)
            yy_atBOL = false;
          else {
            boolean eof = yy_refill();
            yy_markedPos_l = yy_markedPos;
            yy_buffer_l = yy_buffer;
            if (eof) 
              yy_atBOL = false;
            else 
              yy_atBOL = yy_buffer_l[yy_markedPos_l] != '\n';
          }
          break;
        default:
          yy_atBOL = false;
        }
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      if (yy_atBOL)
        yy_state = YY_LEXSTATE[yy_lexical_state+1];
      else
        yy_state = YY_LEXSTATE[yy_lexical_state];

      yy_was_pushback = false;

      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            yy_pushbackPos = yy_pushbackPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            yy_pushbackPos_l = yy_pushbackPos;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 2) == 2 )
            yy_pushbackPos_l = yy_currentPos_l;

          if ( (yy_attributes & 1) == 1 ) {
            yy_was_pushback = (yy_attributes & 4) == 4;
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;
      if (yy_was_pushback)
        yy_markedPos = yy_pushbackPos_l;

      switch (yy_action) {

        case 52: 
        case 58: 
          { 
        buf.setLength( 0 );
	    return STOP;
     }
        case 62: break;
        case 22: 
          { 
//System.err.printf( "In YYSEMIEND, matched |%s|, drop back\n", yytext() );
        buf.append( "\n" );
	    buf.append( yytext() );
	    yybegin( YYSEMI );
     }
        case 63: break;
        case 26: 
          { 
        buf.setLength( 0 );
        yybegin( YYDOUBLE );
     }
        case 64: break;
        case 34: 
          { 
//System.err.printf( "Matched %s in {YYSINGLE}, exit\n", yytext() );
    yybegin( YYINITIAL );
    return DVNSINGLE;
 }
        case 65: break;
        case 56: 
          { 
        buf.setLength( 0 );
	    buf.append( yytext().substring( 5 ) );
	    return SAVESTART;
     }
        case 66: break;
        case 55: 
          { 
        buf.setLength( 0 );
	    buf.append( yytext().substring( 5 ) );
	    return DATASTART;
     }
        case 67: break;
        case 6: 
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
        case 32: 
        case 37: 
        case 38: 
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
        case 48: 
        case 50: 
        case 53: 
          { 
//    General.showDebug( "Matched in {NON_WS}+ " + yytext());
        buf.setLength( 0 );
	    buf.append( yytext() );
	    return DVNNON;
     }
        case 68: break;
        case 33: 
          { 
        buf.setLength( 0 );
	    buf.append( yytext().substring( 1 ) );
	    return DVNFRAMECODE;
     }
        case 69: break;
        case 16: 
        case 18: 
        case 19: 
          { 
//System.err.printf( "Matched %s in {YYSINGLE|DOUBLE}, cont.\n", yytext() );
        buf.append( yytext() );
     }
        case 70: break;
        case 21: 
          { 
//System.err.printf( "In YYSEMI, matched |%s|, begin SEMIEND\n", yytext() );
	yybegin( YYSEMIEND );
     }
        case 71: break;
        case 51: 
        case 57: 
          { 
        buf.setLength( 0 );
	    return SAVEEND;
     }
        case 72: break;
        case 14: 
          { 
        buf.setLength( 0 );
	    return COMMENT;
     }
        case 73: break;
        case 49: 
        case 54: 
          { 
        buf.setLength( 0 );
	    return LOOPSTART;
     }
        case 74: break;
        case 59: 
        case 60: 
          { 
        buf.setLength( 0 );
	    return GLOBALSTART;
     }
        case 75: break;
        case 17: 
        case 24: 
          { 
//System.err.printf( "In ERROR, matched |%s|\n", yytext() );
    buf.setLength( 0 );
    buf.append( "Unknown token: ``" );
    buf.append( yytext() );
    buf.append( "''" );
    return ERROR;
 }
        case 76: break;
        case 23: 
          { 
        buf.append( "\n" );
     }
        case 77: break;
        case 39: 
          { 
        buf.setLength( 0 );
	    buf.append( yytext() );
	    return TAGNAME;
     }
        case 78: break;
        case 20: 
          { 
//System.err.printf( "In YYSEMI, matched |%s|\n", yytext() );
        buf.append( yytext() );
     }
        case 79: break;
        case 25: 
          { 
//System.err.printf( "Matched %s in {SINGLESTART}\n", yytext() );
        buf.setLength( 0 );
	    yybegin( YYSINGLE );
     }
        case 80: break;
        case 35: 
          { 
    yybegin( YYINITIAL );
    return DVNDOUBLE;
 }
        case 81: break;
        case 36: 
          { 
//System.err.printf( "In YYSEMIEND, matched |%s|, exit\n", yytext() );
        yybegin( YYINITIAL );
        return DVNSEMICOLON;
     }
        case 82: break;
        case 15: 
          { 
//    General.showDebug( "Matched %s in ^{SEMI}" + yytext() );
        buf.setLength( 0 );
        buf.append( yytext().substring( 1 ) );
        yybegin( YYSEMI );
     }
        case 83: break;
        case 7: 
          {  }
        case 84: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            switch (yy_lexical_state) {
            case YYINITIAL:
              { 
        buf.setLength( 0 );
        return EOF;
     }
            case 62: break;
            default:
            return YYEOF;
            }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
