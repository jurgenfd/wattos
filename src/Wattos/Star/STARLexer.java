/* The following code was generated by JFlex 1.4.2 on 1/23/09 1:16 PM */

/*
 * This software is copyright (c) 2006 Board of Regents, University of
 * Wisconsin. All Rights Reserved.
 *
 * $Id$
 *
 */
//***************************************************************************
// Scanner flex specification
//***************************************************************************
/* Lex Definitions for a STAR File */

package Wattos.Star;

/**
 * STAR Lexer with some error checking.
 *
 * <STRONG>NOTES</STRONG>:<UL>
 *  <LI>this scanner does not close input file on EOF</LI>
 *  <LI>the scanner does not generate fake "end-of" tokens for
 *      end of data block, end of global block, end of loop
 *      (if closing "stop_" is omitted)</LI>
 *  <LI>this scanner generates "keyword in value" warnings (in C++
 *      version they are generated by the parser)</LI>
 * </UL>
 */


public class STARLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYDOUBLE = 4;
  public static final int YYSEMI = 6;
  public static final int YYINITIAL = 0;
  public static final int YYSEMIEND = 8;
  public static final int YYSINGLE = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /**
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED =
    "\10\0\2\1\1\3\2\0\1\2\22\0\1\1\1\23\1\30\1\26"+
    "\1\22\1\25\1\23\1\27\5\23\2\25\1\23\12\24\1\23\1\31"+
    "\1\23\1\0\1\23\1\0\1\23\1\10\1\7\1\24\1\12\1\16"+
    "\1\24\1\4\4\24\1\5\2\24\1\6\1\17\2\24\1\14\1\13"+
    "\1\24\1\15\4\24\1\21\1\0\1\21\1\0\1\11\1\23\1\10"+
    "\1\7\1\24\1\12\1\16\1\24\1\4\4\24\1\5\2\24\1\6"+
    "\1\17\2\24\1\14\1\13\1\24\1\15\4\24\4\23\53\0\1\20"+
    "\12\0\1\20\4\0\1\20\5\0\27\20\1\0\37\20\1\0\u013f\20"+
    "\31\0\162\20\4\0\14\20\16\0\5\20\11\0\1\20\213\0\1\20"+
    "\13\0\1\20\1\0\3\20\1\0\1\20\1\0\24\20\1\0\54\20"+
    "\1\0\46\20\1\0\5\20\4\0\202\20\10\0\105\20\1\0\46\20"+
    "\2\0\2\20\6\0\20\20\41\0\46\20\2\0\1\20\7\0\47\20"+
    "\110\0\33\20\5\0\3\20\56\0\32\20\5\0\13\20\25\0\12\20"+
    "\4\0\2\20\1\0\143\20\1\0\1\20\17\0\2\20\7\0\17\20"+
    "\2\0\1\20\20\0\1\20\1\0\36\20\35\0\3\20\60\0\46\20"+
    "\13\0\1\20\u0152\0\66\20\3\0\1\20\22\0\1\20\7\0\12\20"+
    "\4\0\12\20\25\0\10\20\2\0\2\20\2\0\26\20\1\0\7\20"+
    "\1\0\1\20\3\0\4\20\3\0\1\20\36\0\2\20\1\0\3\20"+
    "\4\0\14\20\23\0\6\20\4\0\2\20\2\0\26\20\1\0\7\20"+
    "\1\0\2\20\1\0\2\20\1\0\2\20\37\0\4\20\1\0\1\20"+
    "\7\0\12\20\2\0\3\20\20\0\11\20\1\0\3\20\1\0\26\20"+
    "\1\0\7\20\1\0\2\20\1\0\5\20\3\0\1\20\22\0\1\20"+
    "\17\0\2\20\4\0\12\20\25\0\10\20\2\0\2\20\2\0\26\20"+
    "\1\0\7\20\1\0\2\20\1\0\5\20\3\0\1\20\36\0\2\20"+
    "\1\0\3\20\4\0\12\20\1\0\1\20\21\0\1\20\1\0\6\20"+
    "\3\0\3\20\1\0\4\20\3\0\2\20\1\0\1\20\1\0\2\20"+
    "\3\0\2\20\3\0\3\20\3\0\10\20\1\0\3\20\55\0\11\20"+
    "\25\0\10\20\1\0\3\20\1\0\27\20\1\0\12\20\1\0\5\20"+
    "\46\0\2\20\4\0\12\20\25\0\10\20\1\0\3\20\1\0\27\20"+
    "\1\0\12\20\1\0\5\20\3\0\1\20\40\0\1\20\1\0\2\20"+
    "\4\0\12\20\25\0\10\20\1\0\3\20\1\0\27\20\1\0\20\20"+
    "\46\0\2\20\4\0\12\20\25\0\22\20\3\0\30\20\1\0\11\20"+
    "\1\0\1\20\2\0\7\20\72\0\60\20\1\0\2\20\14\0\7\20"+
    "\11\0\12\20\47\0\2\20\1\0\1\20\2\0\2\20\1\0\1\20"+
    "\2\0\1\20\6\0\4\20\1\0\7\20\1\0\3\20\1\0\1\20"+
    "\1\0\1\20\2\0\2\20\1\0\4\20\1\0\2\20\11\0\1\20"+
    "\2\0\5\20\1\0\1\20\11\0\12\20\2\0\2\20\42\0\1\20"+
    "\37\0\12\20\26\0\10\20\1\0\42\20\35\0\4\20\164\0\42\20"+
    "\1\0\5\20\1\0\2\20\25\0\12\20\6\0\6\20\112\0\46\20"+
    "\12\0\51\20\7\0\132\20\5\0\104\20\5\0\122\20\6\0\7\20"+
    "\1\0\77\20\1\0\1\20\1\0\4\20\2\0\7\20\1\0\1\20"+
    "\1\0\4\20\2\0\47\20\1\0\1\20\1\0\4\20\2\0\37\20"+
    "\1\0\1\20\1\0\4\20\2\0\7\20\1\0\1\20\1\0\4\20"+
    "\2\0\7\20\1\0\7\20\1\0\27\20\1\0\37\20\1\0\1\20"+
    "\1\0\4\20\2\0\7\20\1\0\47\20\1\0\23\20\16\0\11\20"+
    "\56\0\125\20\14\0\u026c\20\2\0\10\20\12\0\32\20\5\0\113\20"+
    "\25\0\15\20\1\0\4\20\16\0\22\20\16\0\22\20\16\0\15\20"+
    "\1\0\3\20\17\0\64\20\43\0\1\20\4\0\1\20\3\0\12\20"+
    "\46\0\12\20\6\0\130\20\10\0\51\20\127\0\35\20\51\0\50\20"+
    "\2\0\5\20\u038b\0\154\20\224\0\234\20\4\0\132\20\6\0\26\20"+
    "\2\0\6\20\2\0\46\20\2\0\6\20\2\0\10\20\1\0\1\20"+
    "\1\0\1\20\1\0\1\20\1\0\37\20\2\0\65\20\1\0\7\20"+
    "\1\0\1\20\3\0\3\20\1\0\7\20\3\0\4\20\2\0\6\20"+
    "\4\0\15\20\5\0\3\20\1\0\7\20\164\0\1\20\15\0\1\20"+
    "\202\0\1\20\4\0\1\20\2\0\12\20\1\0\1\20\3\0\5\20"+
    "\6\0\1\20\1\0\1\20\1\0\1\20\1\0\4\20\1\0\3\20"+
    "\1\0\7\20\3\0\3\20\5\0\5\20\u0ebb\0\2\20\52\0\5\20"+
    "\5\0\2\20\4\0\126\20\6\0\3\20\1\0\132\20\1\0\4\20"+
    "\5\0\50\20\4\0\136\20\21\0\30\20\70\0\20\20\u0200\0\u19b6\20"+
    "\112\0\u51a6\20\132\0\u048d\20\u0773\0\u2ba4\20\u215c\0\u012e\20\2\0\73\20"+
    "\225\0\7\20\14\0\5\20\5\0\1\20\1\0\12\20\1\0\15\20"+
    "\1\0\5\20\1\0\1\20\1\0\2\20\1\0\2\20\1\0\154\20"+
    "\41\0\u016b\20\22\0\100\20\2\0\66\20\50\0\14\20\164\0\5\20"+
    "\1\0\207\20\23\0\12\20\7\0\32\20\6\0\32\20\13\0\131\20"+
    "\3\0\6\20\2\0\6\20\2\0\6\20\2\0\3\20\43\0";

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\1\2\6\1\1\3\1\4\1\5\1\6"+
    "\2\5\1\7\2\10\1\11\2\12\1\6\1\13\1\14"+
    "\6\1\1\15\1\16\1\17\2\20\2\1\1\21\11\1"+
    "\1\22\1\1\1\23\1\24\1\1\1\22\1\25\1\26"+
    "\1\23\1\24\2\27";

  private static int [] zzUnpackAction() {
    int [] result = new int[64];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\32\0\64\0\116\0\150\0\202\0\234\0\266"+
    "\0\320\0\352\0\u0104\0\u011e\0\u0138\0\u0152\0\u016c\0\u0186"+
    "\0\u01a0\0\u01a0\0\u01ba\0\u01d4\0\u01ee\0\u0208\0\u01a0\0\u01a0"+
    "\0\u0222\0\u01a0\0\u023c\0\u01a0\0\u01a0\0\u0256\0\u0270\0\u028a"+
    "\0\u02a4\0\u02be\0\u02d8\0\u0152\0\u01ba\0\u01d4\0\u01a0\0\u02f2"+
    "\0\u030c\0\u0326\0\u028a\0\u0340\0\u035a\0\u0374\0\u038e\0\u03a8"+
    "\0\u03c2\0\u03dc\0\u03f6\0\u0410\0\u042a\0\u0444\0\u045e\0\u0478"+
    "\0\u0492\0\u04ac\0\u0444\0\u04c6\0\u04e0\0\u04fa\0\u0514\0\u052e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[64];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\3\10\1\11\1\12\3\7\1\13\1\14\1\7"+
    "\1\15\5\7\1\16\3\7\1\17\4\7\3\10\1\11"+
    "\1\12\3\7\1\13\1\14\1\7\1\15\5\7\1\16"+
    "\3\7\1\17\2\7\1\20\3\21\1\22\23\21\1\23"+
    "\5\21\1\22\24\21\1\24\1\21\2\25\1\26\1\27"+
    "\26\25\2\30\1\31\1\32\25\30\1\33\1\7\3\0"+
    "\26\7\1\0\3\10\23\0\1\34\1\35\1\0\1\7"+
    "\3\0\1\7\1\36\25\7\3\0\2\7\1\37\24\7"+
    "\3\0\15\40\3\7\1\40\6\7\3\0\4\7\1\41"+
    "\22\7\3\0\4\7\1\42\2\7\1\43\17\7\3\0"+
    "\14\44\2\7\10\44\3\17\1\0\26\17\3\20\1\0"+
    "\26\20\33\0\3\45\27\0\3\46\26\0\2\25\2\0"+
    "\26\25\3\0\1\27\31\0\1\32\27\0\1\47\1\50"+
    "\1\47\26\0\1\7\3\0\2\7\1\51\24\7\3\0"+
    "\2\7\1\52\24\7\3\0\16\53\2\7\2\53\5\7"+
    "\3\0\7\7\1\54\17\7\3\0\11\7\1\55\15\7"+
    "\3\0\2\7\1\56\23\7\3\0\1\47\26\0\1\7"+
    "\3\0\3\7\1\57\23\7\3\0\13\7\1\60\13\7"+
    "\3\0\4\7\1\61\22\7\3\0\12\7\1\62\14\7"+
    "\3\0\13\7\1\63\13\7\3\0\4\7\1\64\22\7"+
    "\3\0\5\7\1\65\21\7\3\0\5\7\1\66\21\7"+
    "\3\0\5\7\1\67\21\7\3\0\5\7\1\70\21\7"+
    "\3\0\1\7\1\71\25\7\3\72\26\7\1\73\3\0"+
    "\26\73\1\74\1\75\1\0\1\75\26\74\1\7\1\76"+
    "\1\0\1\76\27\7\3\0\5\7\1\77\20\7\1\0"+
    "\3\72\26\0\1\74\3\0\26\74\1\0\1\75\1\0"+
    "\1\75\27\0\1\76\1\0\1\76\26\0\1\7\1\100"+
    "\1\0\1\100\26\7\1\0\1\100\1\0\1\100\26\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1352];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\12\1\2\11\4\1\2\11\1\1\1\11\1\1"+
    "\2\11\11\1\1\11\31\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[64];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the
   * matched text
   */
  private int yycolumn;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    private static final boolean DEBUG = false;

    public static final int ERROR = 0;
            /** Parser warning. */
    public static final int WARNING = 1;
            /** Start of global block. */
    public static final int GLOBALSTART = 2;
            /** End of global block. */
    public static final int GLOBALEND = 3;
            /** Start of data block. */
    public static final int DATASTART = 4;
            /** End of data block. */
    public static final int DATAEND = 5;
            /** Start of saveframe. */
    public static final int SAVESTART = 6;
            /** End of saveframe. */
    public static final int SAVEEND = 7;
            /** Start of loop. */
    public static final int LOOPSTART = 8;
            /** End of loop. */
    public static final int STOP = 9;
            /** Tag. */
    public static final int TAGNAME = 10;
            /** Value enclosed in single quotes. */
    public static final int DVNSINGLE = 11;
            /** Value enclosed in double quotes. */
    public static final int DVNDOUBLE = 12;
            /** Value enclosed in semicolons. */
    public static final int DVNSEMICOLON = 13;
            /** Framecode value. */
    public static final int DVNFRAMECODE = 14;
            /** Bareword value. */
    public static final int DVNNON = 15;
            /** Comment. */
    public static final int COMMENT = 16;
            /** End of input. */
    public static final int EOF = 17;
    /** tokens */
    public enum Types {
        /** Parser error. */
        ERROR,
        /** Parser warning. */
        WARNING,
        /** Start of global block. */
        GLOBALSTART,
        /** End of global block. */
        GLOBALEND,
        /** Start of data block. */
        DATASTART,
        /** End of data block. */
        DATAEND,
        /** Start of saveframe. */
        SAVESTART,
        /** End of saveframe. */
        SAVEEND,
        /** Start of loop. */
        LOOPSTART,
        /** End of loop. */
        STOP,
        /** Tag.  */
        TAGNAME,
        /** Value enclosed in single quotes. */
        DVNSINGLE,
        /** Value enclosed in double quotes. */
        DVNDOUBLE,
        /** Value enclosed in semicolons. */
        DVNSEMICOLON,
        /** Framecode value. */
        DVNFRAMECODE,
        /** Bareword value. */
        DVNNON,
        /** Comment. */
        COMMENT,
        /** End of input. */
        EOF;
    }
    /* buffer for quoted values */
    private StringBuilder buf;
    /** Returns line number (counting from 1).
     * Returns <CODE>yyline + 1</CODE>
     * @return line number
     */
    public int getLine() {
        return yyline + 1;
    }
    /** Returns column number.
     * @return column number
     */
    public int getColumn() {
        return yycolumn;
    }
    /** Returns text of the last token.
     * <P>
     * Use this method instead of <CODE>yytext()</CODE> to retrieve tokens.
     *<P>
     * Because quoted values (DVNSINGLE, DVNDOUBLE, DVNSEMICOLON) are parsed
     * differently from non-quoted ones (DVNNON and DVNFRAMECODE), their
     * text is stored in a separate buffer.
     * <P>
     * For other token types returns <CODE>yytext()</CODE>.
     */
    public String getText() {
        if( buf.length() < 1 ) return yytext();
    return buf.toString();
    }
    /** Pushes number of characters back into input stream.
     * @param num number of characters to push back
     */
    public void pushBack( int num ) {
        yypushback( num );
    }
    /** Marks input stream.
     * @param num read-ahead limit
     */
     /*
    public void mark( int num ) throws java.io.IOException {
    yy_reader.mark( num );
    }
    */
    /** Rewinds input stream to last mark. */
    /*
    public void rewind() throws java.io.IOException {
    yy_reader.reset();
    }
    */
//******************************************************************************


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public STARLexer(java.io.Reader in) {
      buf = new StringBuilder();
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public STARLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1298) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }
    }

	// numRead < 0
    return true;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Types yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r':
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof)
              zzAtBOL = false;
            else
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 16:
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { //System.err.printf( "In YYSEMIEND, matched |%s|, exit\n", yytext() );
        yybegin( YYINITIAL );
        return Types.DVNSEMICOLON;
          }
        case 24: break;
        case 10:
          { buf.append( "\n" );
          }
        case 25: break;
        case 19:
          { buf.setLength( 0 );
        return Types.SAVEEND;
          }
        case 26: break;
        case 11:
          { if( DEBUG ) System.err.printf( "Matched |%s| in {SINGLESTART}\n", yytext() );
        buf.setLength( 0 );
        yybegin( YYSINGLE );
          }
        case 27: break;
        case 9:
          { //System.err.printf( "In YYSEMIEND, matched |%s|, drop back\n", yytext() );
        buf.append( "\n" );
        buf.append( yytext() );
        yybegin( YYSEMI );
          }
        case 28: break;
        case 4:
          { //System.err.printf( "Matched %s in ^{SEMI}\n", yytext() );
        buf.setLength( 0 );
        buf.append( yytext().substring( 1 ) );
        yybegin( YYSEMI );
          }
        case 29: break;
        case 8:
          { //System.err.printf( "In YYSEMI, matched |%s|, begin SEMIEND\n", yytext() );
    yybegin( YYSEMIEND );
          }
        case 30: break;
        case 22:
          { buf.setLength( 0 );
        buf.append( yytext().substring( 5 ) );
        return Types.SAVESTART;
          }
        case 31: break;
        case 17:
          { buf.setLength( 0 );
        buf.append( yytext() );
        return Types.TAGNAME;
          }
        case 32: break;
        case 21:
          { buf.setLength( 0 );
        buf.append( yytext().substring( 5 ) );
        return Types.DATASTART;
          }
        case 33: break;
        case 12:
          { if( DEBUG ) System.err.printf( "Matched |%s| in {DOUBLESTART}\n", yytext() );
        buf.setLength( 0 );
        yybegin( YYDOUBLE );
          }
        case 34: break;
        case 13:
          { buf.setLength( 0 );
        buf.append( yytext().substring( 1 ) );
        return Types.DVNFRAMECODE;
          }
        case 35: break;
        case 7:
          { //System.err.printf( "In YYSEMI, matched |%s|\n", yytext() );
        buf.append( yytext() );
          }
        case 36: break;
        case 14:
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { //System.err.printf( "Matched %s in {YYSINGLE}, exit\n", yytext() );
    yybegin( YYINITIAL );
    return Types.DVNSINGLE;
          }
        case 37: break;
        case 18:
          { buf.setLength( 0 );
        return Types.LOOPSTART;
          }
        case 38: break;
        case 15:
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { //System.err.printf( "Matched %s in {YYDOUBLE}, exit\n", yytext() );
    yybegin( YYINITIAL );
    return Types.DVNDOUBLE;
          }
        case 39: break;
        case 20:
          { buf.setLength( 0 );
        return Types.STOP;
          }
        case 40: break;
        case 6:
          { //System.err.printf( "In ERROR, matched |%s|\n", yytext() );
    buf.setLength( 0 );
    buf.append( "Unknown token: ``" );
    buf.append( yytext() );
    buf.append( "''" );
    return Types.ERROR;
          }
        case 41: break;
        case 23:
          { buf.setLength( 0 );
        return Types.GLOBALSTART;
          }
        case 42: break;
        case 1:
          { if( DEBUG ) System.err.printf( "Matched |%s| in {NON_WS}+\n", yytext() );
        buf.setLength( 0 );
        buf.append( yytext() );
        return Types.DVNNON;
          }
        case 43: break;
        case 3:
          { buf.setLength( 0 );
        return Types.COMMENT;
          }
        case 44: break;
        case 5:
          { //System.err.printf( "Matched %s in {YYSINGLE|DOUBLE}, cont.\n", yytext() );
        buf.append( yytext() );
          }
        case 45: break;
        case 2:
          {
          }
        case 46: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case YYINITIAL: {
              buf.setLength( 0 );
        return Types.EOF;
            }
            case 65: break;
            default:
            return null;
            }
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
