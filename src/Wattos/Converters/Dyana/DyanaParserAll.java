/* Generated By:JavaCC: Do not edit this line. DyanaParserAll.java */
package Wattos.Converters.Dyana;

import Wattos.Utils.*;
import Wattos.Converters.Dyana.Utils;
import Wattos.Converters.Common.*;

import java.util.*;
import java.io.*;

/**
 * @author  Jurgen Doreleijers
 * @version 0.1
 */

public class DyanaParserAll implements DyanaParserAllConstants {

    // Type of data to parse
    static int data_type = Varia.DATA_TYPE_DISTANCE;
    /** Number of parameters on the second part of a restraint definition as
        split up in the grammar below.
    */
    static final int NUMBER_OF_VARIABLE_PARAMETERS_DISTANCE = 5;
    /** The residue number and atom name respectively. */
    static final int NUMBER_OF_VARIABLE_PARAMETERS_AMBIG    = 2;

    //parser stack to store ASSI statement
    static Vector stack;
    //parser stack to store AMBIG statement
    static Vector ambigStack;
    //Store all comments
    static Vector cmtStack;
    //Store all error lines for second pass
    static Vector errLineStack;
    //Store all errors from second pass
    static Vector errStack;

    //Store most recently parsed Assi line and col 
    //used by error recording later, for second pass
    //scanning for errors
    static int lastAssiLine;
    static int lastAssiCol;

    /**Constructor
     */
    public DyanaParserAll() {
        init();
    }

    public void init() {
        stack           = new Vector();
        ambigStack      = new Vector();
        cmtStack        = new Vector();
        errLineStack    = new Vector();
        errStack        = new Vector();
    }

    /**Start parsing of Dyana file 
     */
    public void parse(String DyanaName, int type, boolean parse) {
        String inputFile = DyanaName;
        data_type = type;
        try{
            /* Check first if file ends with an end of line, if not, 
                append an extra "\n" before EOF as this would cause problems later on
                */
            RandomAccessFile inputRead = new RandomAccessFile(inputFile, "r");
            long inputBytes = inputRead.length() - 1;
            //forward file pointer to last byte char in file
            inputRead.seek(inputBytes);
            char lastChar = (char)(inputRead.read());
            if (lastChar != '\n' && lastChar != '\r') {
                inputRead.close();
                // Open an appending writer
                PrintWriter input = new PrintWriter(new BufferedWriter(new FileWriter(DyanaName, true)));
                input.print('\n');
                input.close();
            }
            else
                inputRead.close();

            ReInit( new java.io.FileInputStream(DyanaName) );
            getInput();

            //second pass processing errors
            Utils.saveErrors(inputFile, errLineStack, errStack);
        }
        catch (FileNotFoundException e) {
            System.out.println("FileNotFoundException opening " + DyanaName );
            General.showThrowable(e);
        }
        catch (ParseException e) {
            System.out.println("ParseException parsing " + DyanaName );
            General.showThrowable(e);
        }
        catch (IOException e) {
            System.out.println("IOException in parse method" );
            General.showThrowable(e);
        }
    }


    void getInput() throws ParseException {
        switch ( data_type ) {
            case Varia.DATA_TYPE_DISTANCE:
                getInputDistanceConstraints();
                break;
            case Varia.DATA_TYPE_DIHEDRAL:
                getInputDihedral();
                break;
            case Varia.DATA_TYPE_DIPOLAR_COUPLING:
                getInputDipolar();
                break;
            case Varia.DATA_TYPE_CHEMICAL_SHIFT:
                System.out.println("WARNING: Not implemented yet: DATA_TYPE_CHEMICAL_SHIFT");
                break;
            case Varia.DATA_TYPE_COUPLING_CONSTANT:
                System.out.println("WARNING: Not implemented yet: DATA_TYPE_COUPLING_CONSTANT");
                break;
            case Varia.DATA_TYPE_PLANARITY:
                System.out.println("WARNING: Not implemented yet: DATA_TYPE_PLANARITY");
                break;
        }
    }

    /**return Vector storing all data
     * every element is a LogicalNode object
     */
    public Vector popResult() {
        return stack;
    }


    /**return Vector storing all comments
     * every element is a Comment object
     */
    public Vector popComment() {
        return cmtStack;
    }


    /**return Vector storing all errors
     * every element is an ErrorLine object
     */
    public Vector popError() {
        return errStack;
    }

  static final public void getInputDipolar() throws ParseException {
    try {
      ListDipolar();

    } catch (ParserDoneException e) {
        if (getNextToken().kind != EOF) {
            System.out.println("Caught ParserDone");
        }
    }
  }

  static final public void ListDipolar() throws ParseException, ParserDoneException {
    int[] coor = Utils.storeBeginOfRestraint();
    lastAssiLine    = coor[0];
    lastAssiCol     = coor[1];
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EOL:
          Eol();
          break;
        default:
          jj_la1[0] = jj_gen;
          DipolarRestraint();
        }
        ;
      }

    } catch (ParseException e) {
        error_skipto(NUMBER);
    }
  }

  static final public void DipolarRestraint() throws ParseException, ParserDoneException {
    String residue_number_1, residue_name_1, atom_name_1;
    String residue_number_2=null, residue_name_2=null, atom_name_2=null;
    String value, value_error;
    String optional_relative_weight_force_constant;
    value_error = null;
    int[] coor = Utils.storeBeginOfRestraint();
    lastAssiLine    = coor[0];
    lastAssiCol     = coor[1];
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER:
        residue_number_1 = Number();
        residue_name_1 = Name();
        atom_name_1 = Name();
        if (jj_2_1(2)) {
          residue_number_2 = Number();
          residue_name_2 = Name();
          atom_name_2 = Name();
        } else {
          ;
        }
        value = Number();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUMBER:
          value_error = Number();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NUMBER:
            optional_relative_weight_force_constant = Number();
            break;
          default:
            jj_la1[1] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[2] = jj_gen;
          ;
        }
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EOL:
            ;
            break;
          default:
            jj_la1[3] = jj_gen;
            break label_2;
          }
          Eol();
        }
            Utils.saveDipolar( stack,
                residue_number_1, residue_name_1, atom_name_1,
                residue_number_2, residue_name_2, atom_name_2,
                value, value_error );
        break;
      default:
        jj_la1[4] = jj_gen;
        error_skipto(NUMBER);
      }
    } catch (ParseException e) {
        error_skipto(NUMBER);
    }
  }

  static final public void getInputDihedral() throws ParseException {
    try {
      ListDihedral();

    } catch (ParserDoneException e) {
        if (getNextToken().kind != EOF) {
            System.out.println("Caught ParserDone");
        }
    }
  }

  static final public void ListDihedral() throws ParseException, ParserDoneException {
    int[] coor = Utils.storeBeginOfRestraint();
    lastAssiLine    = coor[0];
    lastAssiCol     = coor[1];
    try {
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EOL:
          Eol();
          break;
        default:
          jj_la1[5] = jj_gen;
          DihedralRestraint();
        }
        ;
      }

    } catch (ParseException e) {
        error_skipto(NUMBER);
    }
  }

  static final public void DihedralRestraint() throws ParseException, ParserDoneException {
    String residue_number, residue_name, angle_name, angle_low, angle_high;
    String optional_relative_weight_force_constant;
    int[] coor = Utils.storeBeginOfRestraint();
    lastAssiLine    = coor[0];
    lastAssiCol     = coor[1];
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER:
        residue_number = Number();
        residue_name = Name();
        angle_name = Name();
        angle_low = Number();
        angle_high = Number();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUMBER:
          optional_relative_weight_force_constant = Number();
          break;
        default:
          jj_la1[6] = jj_gen;
          ;
        }
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EOL:
            ;
            break;
          default:
            jj_la1[7] = jj_gen;
            break label_4;
          }
          Eol();
        }
            Utils.saveDihedral( stack, residue_number, residue_name, angle_name, angle_low, angle_high );
        break;
      default:
        jj_la1[8] = jj_gen;
        error_skipto(NUMBER);
      }
    } catch (ParseException e) {
        error_skipto(NUMBER);
    }
  }

/** This code depends on the fact that the ambig section is always last
in the constraint file; it will go and erroneously try to match ambi
 statements even though they might be another listdistance if order
is not followed.
*/
  static final public void getInputDistanceConstraints() throws ParseException {
    boolean results = false;
    try {
      ListDistance();

    } catch (ParserDoneException e) {
        if (getNextToken().kind != EOF) {
            System.out.println("Caught ParserDone");
        }
    } finally {
        if ( ambigStack.size() > 0  ) {
            Utils.processDistanceAmig(stack, ambigStack);
        }
    }
  }

/** The skipto Number will not do correct error recovery in the ambi
cases but since there are so few of those that's ok for now.
*/
  static final public void ListDistance() throws ParseException, ParserDoneException {
    int[] coor = Utils.storeBeginOfRestraint();
    lastAssiLine    = coor[0];
    lastAssiCol     = coor[1];
    try {
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EOL:
          Eol();
          break;
        case AMBIG:
          AmbigDefinition();
          break;
        default:
          jj_la1[9] = jj_gen;
          DistanceRestraint();
        }
        ;
      }

    } catch (ParseException e) {
        error_skipto(NUMBER);
    }
  }

/** The lookahead is given because we know what we're doing; consume by
this non-terminal if it comes up.
*/
  static final public void AmbigDefinition() throws ParseException, ParserDoneException {
    String atom_name;
    ArrayList results = new ArrayList();
    int[] coor = Utils.storeBeginOfRestraint();
    lastAssiLine    = coor[0];
    lastAssiCol     = coor[1];
    Ambig();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NAME:
      atom_name = Name();
      break;
    case NUMBER:
      atom_name = Number();
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    EqualSign();
    results = AmbigSet();
    label_6:
    while (true) {
      Eol();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EOL:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_6;
      }
    }
        results.add(0, atom_name ); /** mixed nuts in this bag; watch out */
        ambigStack.add(results);
  }

  static final public ArrayList AmbigSet() throws ParseException, ParserDoneException {
    String[] result_one_restraint;
    ArrayList results = null;
    result_one_restraint = AmbigSetPart();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NAME:
      results = AmbigSet();
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
        if ( results == null ) {
            results = new ArrayList();
        }
        /** Insert at beginning important. */
        results.add( 0, result_one_restraint );
        {if (true) return results;}
    throw new Error("Missing return statement in function");
  }

  static final public String[] AmbigSetPart() throws ParseException, ParserDoneException {
    String residue_number, atom_name;
    String[] result_one_restraint = new String[ NUMBER_OF_VARIABLE_PARAMETERS_AMBIG ];
    atom_name = Name();
    residue_number = Number();
        /** The mapping could of course be collapsed for efficiency. */
        result_one_restraint[ 0 ] = atom_name;
        result_one_restraint[ 1 ] = residue_number;

        {if (true) return result_one_restraint;}
    throw new Error("Missing return statement in function");
  }

  static final public void DistanceRestraint() throws ParseException, ParserDoneException {
    String residue_number_1, residue_name_1;
    ArrayList results = null;
    int[] coor = Utils.storeBeginOfRestraint();
    lastAssiLine    = coor[0];
    lastAssiCol     = coor[1];
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER:
        residue_number_1 = Number();
        residue_name_1 = Name();
        label_7:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EOL:
            ;
            break;
          default:
            jj_la1[13] = jj_gen;
            break label_7;
          }
          Eol();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NAME:
          results = DistanceSet();
          break;
        default:
          jj_la1[14] = jj_gen;
          ;
        }
            if ( results != null ) {
                Utils.saveDistance( stack, residue_number_1, residue_name_1, results );
            }
        break;
      default:
        jj_la1[15] = jj_gen;
        error_skipto(NUMBER);
      }
    } catch (ParseException e) {
        error_skipto(NUMBER);
    }
  }

  static final public ArrayList DistanceSet() throws ParseException, ParserDoneException {
    String[] result_one_restraint;
    ArrayList results = null;
    result_one_restraint = DistanceSetPart();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NAME:
      results = DistanceSet();
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
        if ( results == null ) {
            results = new ArrayList();
        }
        /** Insert at beginning important. */
        results.add( 0, result_one_restraint );
        {if (true) return results;}
    throw new Error("Missing return statement in function");
  }

/** The lookahead is given because we know what we're doing; consume by
this non-terminal if it comes up.*/
  static final public String[] DistanceSetPart() throws ParseException, ParserDoneException {
    String atom_name_1;
    String residue_number_2, residue_name_2, atom_name_2, upper_limit;
    String bogus_relative_weight = null;
    String[] result_one_restraint = new String[ NUMBER_OF_VARIABLE_PARAMETERS_DISTANCE ];
    atom_name_1 = Name();
    residue_number_2 = Number();
    residue_name_2 = Name();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NAME:
      /** Strange but observed for a file with ambis (pdb code: ) 
                  Not allowed for atom_name_1 !*/
              atom_name_2 = Name();
      break;
    case NUMBER:
      atom_name_2 = Number();
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    upper_limit = Number();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
      bogus_relative_weight = Number();
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
    label_8:
    while (true) {
      Eol();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EOL:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_8;
      }
    }
        /** The mapping could of course be collapsed for efficiency. */
        result_one_restraint[ 0 ] = atom_name_1;
        result_one_restraint[ 1 ] = residue_number_2;
        result_one_restraint[ 2 ] = residue_name_2;
        result_one_restraint[ 3 ] = atom_name_2;
        result_one_restraint[ 4 ] = upper_limit;

        {if (true) return result_one_restraint;}
    throw new Error("Missing return statement in function");
  }

  static final public String EqualSign() throws ParseException {
    Token t;
    t = jj_consume_token(EQUAL_SIGN);
        Utils.saveComment(t,cmtStack);
        {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  static final public String Number() throws ParseException {
    Token t;
    t = jj_consume_token(NUMBER);
        Utils.saveComment(t,cmtStack);
        {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  static final public String Name() throws ParseException {
    Token t;
    t = jj_consume_token(NAME);
        Utils.saveComment(t,cmtStack);
        {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  static final public String Ambig() throws ParseException {
    Token t;
    t = jj_consume_token(AMBIG);
        Utils.saveComment(t,cmtStack);
        {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  static final public String Eol() throws ParseException {
    Token t;
    t = jj_consume_token(EOL);
        Utils.saveComment(t,cmtStack);
        {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  static void error_skipto(int kind) throws ParseException, ParserDoneException {
    Utils.error_skipto(kind, errLineStack, lastAssiLine, lastAssiCol);
  }

  static final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static final private boolean jj_3R_10() {
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  static final private boolean jj_3R_9() {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  static final private boolean jj_3_1() {
    if (jj_3R_9()) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  static public DyanaParserAllTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  static public Token token, jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static public boolean lookingAhead = false;
  static private boolean jj_semLA;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[20];
  static private int[] jj_la1_0;
  static {
      jj_la1_0();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x100000,0x40000,0x40000,0x100000,0x40000,0x100000,0x40000,0x100000,0x40000,0x110000,0xc0000,0x100000,0x80000,0x100000,0x80000,0x40000,0x80000,0xc0000,0x40000,0x100000,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[1];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  public DyanaParserAll(java.io.InputStream stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new DyanaParserAllTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public DyanaParserAll(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new DyanaParserAllTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public DyanaParserAll(DyanaParserAllTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(DyanaParserAllTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  static final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.Vector jj_expentries = new java.util.Vector();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  static public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[24];
    for (int i = 0; i < 24; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 20; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 24; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static final public void enable_tracing() {
  }

  static final public void disable_tracing() {
  }

  static final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
    }
    jj_rescan = false;
  }

  static final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
