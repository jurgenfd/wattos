/* Generated By:JavaCC: Do not edit this line. AmberParserAllTokenManager.java */
package Wattos.Converters.Amber;

public class AmberParserAllTokenManager implements AmberParserAllConstants
{
  public static  java.io.PrintStream debugStream = System.out;
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x7c0a000000L) != 0L)
         {
            jjmatchedKind = 48;
            return 13;
         }
         if ((active0 & 0x2003f4000000L) != 0L)
         {
            jjmatchedKind = 48;
            return 20;
         }
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 51;
            return 2;
         }
         return -1;
      case 1:
         if ((active0 & 0x207f0e000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 1;
            return 20;
         }
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 1;
            return 37;
         }
         if ((active0 & 0xf0000000L) != 0L)
            return 20;
         return -1;
      case 2:
         if ((active0 & 0x20580e000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 2;
            return 20;
         }
         if ((active0 & 0x2700000000L) != 0L)
            return 20;
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 2;
            return 37;
         }
         return -1;
      case 3:
         if ((active0 & 0x204008000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 3;
            return 20;
         }
         if ((active0 & 0x100000L) != 0L)
            return 37;
         if ((active0 & 0x1806000000L) != 0L)
            return 20;
         return -1;
      case 4:
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 4;
            return 20;
         }
         if ((active0 & 0x200008000000L) != 0L)
            return 20;
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
static private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 38:
         return jjMoveStringLiteralDfa1_0(0x100000L);
      case 40:
         return jjStopAtPos(0, 46);
      case 41:
         return jjStopAtPos(0, 47);
      case 44:
         return jjStopAtPos(0, 23);
      case 61:
         return jjStopAtPos(0, 22);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x200000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x7c0a000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x4000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x3f0000000L);
      default :
         return jjMoveNfa_0(3, 0);
   }
}
static private final int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 49:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(1, 28, 20);
         break;
      case 50:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(1, 29, 20);
         break;
      case 51:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(1, 30, 20);
         break;
      case 52:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(1, 31, 20);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x2008000000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0x1800000000L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa2_0(active0, 0x300000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x4400100000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x6000000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
static private final int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 50:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(2, 32, 20);
         break;
      case 51:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(2, 33, 20);
         break;
      case 54:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(2, 34, 20);
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x6000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x1800000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L);
      case 84:
      case 116:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 37, 20);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
static private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 49:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 35, 20);
         break;
      case 50:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 36, 20);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000L);
      case 75:
      case 107:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 25, 20);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 26, 20);
         break;
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000L);
      case 84:
      case 116:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 20, 37);
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
static private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(4, 27, 20);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000L);
      case 77:
      case 109:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 45, 20);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
static private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 38, 20);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
static private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
static private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
static private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 73;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 13:
               case 20:
                  if ((0x57ffaca800000000L & l) == 0L)
                     break;
                  if (kind > 48)
                     kind = 48;
                  jjCheckNAdd(20);
                  break;
               case 2:
                  if ((0xfffffffeffffc9ffL & l) != 0L)
                  {
                     if (kind > 51)
                        kind = 51;
                     jjCheckNAdd(37);
                  }
                  if ((0xdc00c4701fffc9ffL & l) != 0L)
                  {
                     if (kind > 51)
                        kind = 51;
                     jjCheckNAddTwoStates(36, 37);
                  }
                  break;
               case 3:
                  if ((0xdc00c4701fffc9ffL & l) != 0L)
                  {
                     if (kind > 51)
                        kind = 51;
                     jjCheckNAddTwoStates(36, 37);
                  }
                  else if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 24)
                        kind = 24;
                     jjCheckNAddStates(0, 4);
                  }
                  else if ((0x280000000000L & l) != 0L)
                     jjCheckNAddStates(5, 7);
                  else if (curChar == 35)
                     jjCheckNAddStates(8, 10);
                  else if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 25;
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(22, 23);
                  if ((0x57ffaca800000000L & l) != 0L)
                  {
                     if (kind > 48)
                        kind = 48;
                     jjCheckNAdd(20);
                  }
                  else if (curChar == 46)
                     jjCheckNAdd(6);
                  else if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 2;
                  if (curChar == 47)
                  {
                     if (kind > 21)
                        kind = 21;
                  }
                  break;
               case 4:
                  if (curChar == 47 && kind > 21)
                     kind = 21;
                  break;
               case 5:
                  if (curChar == 46)
                     jjCheckNAdd(6);
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddTwoStates(6, 7);
                  break;
               case 8:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(9);
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAdd(9);
                  break;
               case 10:
                  if (curChar == 40)
                     jjCheckNAdd(11);
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(11, 12);
                  break;
               case 12:
                  if (curChar == 41 && kind > 39)
                     kind = 39;
                  break;
               case 15:
                  if (curChar == 40)
                     jjCheckNAdd(16);
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(16, 17);
                  break;
               case 17:
                  if (curChar == 41 && kind > 40)
                     kind = 40;
                  break;
               case 21:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(22, 23);
                  break;
               case 22:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(22, 23);
                  break;
               case 23:
                  if (curChar == 34 && kind > 48)
                     kind = 48;
                  break;
               case 24:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 25:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(26, 27);
                  break;
               case 26:
                  if (curChar == 39 && kind > 48)
                     kind = 48;
                  break;
               case 27:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(11, 14);
                  break;
               case 28:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAdd(26);
                  break;
               case 29:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(28, 26);
                  break;
               case 30:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(15, 17);
                  break;
               case 31:
                  if (curChar == 35)
                     jjCheckNAddStates(8, 10);
                  break;
               case 32:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(8, 10);
                  break;
               case 33:
                  if (curChar == 10 && kind > 49)
                     kind = 49;
                  break;
               case 34:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if ((0x2400L & l) != 0L && kind > 49)
                     kind = 49;
                  break;
               case 36:
                  if ((0xdc00c4701fffc9ffL & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAddTwoStates(36, 37);
                  break;
               case 37:
                  if ((0xfffffffeffffc9ffL & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAdd(37);
                  break;
               case 38:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAddStates(5, 7);
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddStates(18, 20);
                  break;
               case 40:
                  if (curChar != 46)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddTwoStates(41, 42);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddTwoStates(41, 42);
                  break;
               case 43:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(44);
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAdd(44);
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddStates(21, 24);
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddStates(0, 4);
                  break;
               case 48:
                  if (curChar == 40)
                     jjCheckNAdd(49);
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(49, 50);
                  break;
               case 50:
                  if (curChar == 41 && kind > 41)
                     kind = 41;
                  break;
               case 54:
                  if (curChar == 40)
                     jjCheckNAdd(55);
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(55, 56);
                  break;
               case 56:
                  if (curChar == 41 && kind > 42)
                     kind = 42;
                  break;
               case 61:
                  if (curChar == 40)
                     jjCheckNAdd(62);
                  break;
               case 62:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(62, 63);
                  break;
               case 63:
                  if (curChar == 41 && kind > 43)
                     kind = 43;
                  break;
               case 68:
                  if (curChar == 40)
                     jjCheckNAdd(69);
                  break;
               case 69:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(69, 70);
                  break;
               case 70:
                  if (curChar == 41 && kind > 44)
                     kind = 44;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 13:
                  if ((0x47ffffffd7ffffffL & l) != 0L)
                  {
                     if (kind > 48)
                        kind = 48;
                     jjCheckNAdd(20);
                  }
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 2:
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAdd(37);
                  if ((0xd0000001e8000001L & l) != 0L)
                  {
                     if (kind > 51)
                        kind = 51;
                     jjCheckNAddTwoStates(36, 37);
                  }
                  else if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if ((0x47ffffffd7ffffffL & l) != 0L)
                  {
                     if (kind > 48)
                        kind = 48;
                     jjCheckNAdd(20);
                  }
                  if ((0xd0000001e8000001L & l) != 0L)
                  {
                     if (kind > 51)
                        kind = 51;
                     jjCheckNAddTwoStates(36, 37);
                  }
                  else if ((0x1000000010L & l) != 0L)
                     jjAddStates(25, 28);
                  else if ((0x40000000400L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  else if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 0:
                  if ((0x1000000010L & l) != 0L && kind > 21)
                     kind = 21;
                  break;
               case 1:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 7:
                  if ((0x7000000070L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 14:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 18:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 19:
                  if ((0x40000000400L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if ((0x47ffffffd7ffffffL & l) == 0L)
                     break;
                  if (kind > 48)
                     kind = 48;
                  jjCheckNAdd(20);
                  break;
               case 22:
                  jjAddStates(29, 30);
                  break;
               case 25:
                  jjCheckNAddTwoStates(26, 27);
                  break;
               case 27:
                  jjCheckNAddStates(11, 14);
                  break;
               case 28:
                  jjCheckNAdd(26);
                  break;
               case 29:
                  jjCheckNAddTwoStates(28, 26);
                  break;
               case 30:
                  jjCheckNAddStates(15, 17);
                  break;
               case 32:
                  jjAddStates(8, 10);
                  break;
               case 36:
                  if ((0xd0000001e8000001L & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAddTwoStates(36, 37);
                  break;
               case 37:
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAdd(37);
                  break;
               case 42:
                  if ((0x7000000070L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 47:
                  if ((0x1000000010L & l) != 0L)
                     jjAddStates(25, 28);
                  break;
               case 51:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 52:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 53:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 57:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 58:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 60:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 64:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 65:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 66:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 67:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 71:
                  if ((0x40000000400L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 72:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 51)
                        kind = 51;
                     jjCheckNAddTwoStates(36, 37);
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 51)
                        kind = 51;
                     jjCheckNAdd(37);
                  }
                  break;
               case 3:
               case 36:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAddTwoStates(36, 37);
                  break;
               case 22:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(29, 30);
                  break;
               case 25:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(26, 27);
                  break;
               case 27:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(11, 14);
                  break;
               case 28:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAdd(26);
                  break;
               case 29:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(28, 26);
                  break;
               case 30:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(15, 17);
                  break;
               case 32:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(8, 10);
                  break;
               case 37:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAdd(37);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 73 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   40, 42, 6, 7, 45, 39, 5, 6, 32, 34, 35, 28, 26, 29, 30, 28, 
   26, 29, 40, 42, 45, 40, 41, 42, 45, 53, 60, 67, 72, 22, 23, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, "\75", "\54", null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, "\50", "\51", null, null, null, null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0x9fffffff00001L, 
};
static final long[] jjtoSkip = {
   0x200000000001eL, 
};
static final long[] jjtoSpecial = {
   0x2000000000000L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[73];
static private final int[] jjstateSet = new int[146];
static protected char curChar;
public AmberParserAllTokenManager(SimpleCharStream stream)
{
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}
public AmberParserAllTokenManager(SimpleCharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 73; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

public static Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
